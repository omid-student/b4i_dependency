<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4ISQL</name>
        <shortname>SQL</shortname>
        <comment>iSQL.h
  iSQL

  Created by b4j on 9/10/14.
  Copyright (c) 2014 Anywhere Software. All rights reserved.</comment>
        <event>QueryComplete (Success As Boolean, Crsr As ResultSet)</event>
        <event>NonQueryComplete (Success As Boolean)</event>
        <method>
            <name DesignerName="Initialize">Initialize:::</name>
            <comment>Initializes the database file. A new database will be created if the file does not exist (and CreateIfNecessary is true).
The database file cannot be located in the assets folder.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>CreateIfNecessary</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="AddNonQueryToBatch">AddNonQueryToBatch::</name>
            <comment>Adds the command and the parameters to the batch. Call ExecNonQueryBatch to execute the batch.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Statement</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ExecNonQueryBatch">ExecNonQueryBatch::</name>
            <comment>Asynchronously executes all the commands previously added with AddNonQueryToBatch. The NonQueryComplete event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ExecQueryAsync">ExecQueryAsync::::</name>
            <comment>Asynchronously executes the query. The QueryComplete event will be raised.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Query</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ExecNonQuery">ExecNonQuery:</name>
            <comment>Executes a non query statement (statement other than SELECT).
Make sure to explicitly create a transaction if executing more than a few statements.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Statement</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ExecNonQuery2">ExecNonQuery2::</name>
            <comment>Executes a non query statement (statement other than SELECT).
Make sure to explicitly create a transaction if executing more than a few statements.
The query can include question marks which will be correctly replaced with the values from the list.
Example:&lt;code&gt;
    SQL1.ExecNonQuery2("INSERT INTO table1 VALUES (?, ?, 0)", Array ("some text", 2))&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Statement</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ExecQuery">ExecQuery:</name>
            <comment>Executes a SELECT query and returns a ResultSet which is used to go over the results.
Example:&lt;code&gt;
Dim rs As ResultSet = SQL1.ExecQuery("SELECT col1, col2 FROM table1")
Do While rs.NextRow
   Log(Cursor.GetString("col1")
Loop&lt;/code&gt;</comment>
            <returntype>B4IResultSet*</returntype>
            <parameter>
                <name>Query</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ExecQuery2">ExecQuery2::</name>
            <comment>Executes a SELECT query and returns a ResultSet which is used to go over the results.
Example:&lt;code&gt;
Dim rs As ResultSet = SQL1.ExecQuery2("SELECT col1, col2 FROM table1 WHERE col3 = ?", Array (22))
Do While rs.NextRow
  Log(Cursor.GetString("col1")
Loop&lt;/code&gt;</comment>
            <returntype>B4IResultSet*</returntype>
            <parameter>
                <name>Query</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ExecQuerySingleResult">ExecQuerySingleResult:</name>
            <comment>Executes the query and returns the value in the first column of the first row. Returns an empty string if no value was found.
Example:&lt;code&gt;
Dim NumberOfMatches As Int = SQL1.ExecQuerySingleResult("SELECT count(*) FROM table1 WHERE col2 &gt; 300")&lt;/code&gt;</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Query</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ExecQuerySingleResult2">ExecQuerySingleResult2::</name>
            <comment>Executes the query and returns the value in the first column of the first row. Returns an empty string if no value was found.
Example:&lt;code&gt;
Dim NumberOfMatches As Int = SQL1.ExecQuerySingleResult2("SELECT count(*) FROM table1 WHERE col2 &gt; ?", Array(300))&lt;/code&gt;</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Query</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="BeginTransaction">BeginTransaction</name>
            <comment>Starts an update transaction.
The code structure should be:&lt;code&gt;
SQL1.BeginTransaction
Try
  'block of statements
  SQL1.TransactionSuccessful
Catch
  SQL1.Rollback 'cancel the transaction
  Log("Error: " &amp; LastException)
End Try&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="TransactionSuccessful">TransactionSuccessful</name>
            <comment>Commits the transaction and ends it.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Rollback">Rollback</name>
            <comment>Rollbacks the transaction (cancels it).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Close">Close</name>
            <comment>Closes the database.</comment>
            <returntype>void</returntype>
        </method>
    </class>
    <class>
        <name>B4IResultSet</name>
        <shortname>ResultSet</shortname>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="NextRow">NextRow</name>
            <comment>Moves to the next row and returns true if there is such a row.
You should always call NextRow before trying to get a value from the ResultSet.
Example:&lt;code&gt;
Dim rs As ResultSet = SQL1.ExecQuery2("SELECT * FROM table1 WHERE col1 = ?", Array(100))
Do While rs.NextRow
  'work with records
Loop
rs.Close&lt;/code&gt;</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="GetColumnName">GetColumnName:</name>
            <comment>Returns the name of the column at the specified index.
The first column index is 0.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetInt2">GetInt2:</name>
            <comment>Returns the value stored in the specified column ordinal as Int.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetInt">GetInt:</name>
            <comment>Returns the value stored in the specified column as Int.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetString2">GetString2:</name>
            <comment>Returns the value stored in the specified column ordinal as String.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetString">GetString:</name>
            <comment>Returns the value stored in the specified column as String.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetLong2">GetLong2:</name>
            <comment>Returns the value stored in the specified column ordinal as Long.</comment>
            <returntype>long long</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetLong">GetLong:</name>
            <comment>Returns the value stored in the specified column as Long.</comment>
            <returntype>long long</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetDouble2">GetDouble2:</name>
            <comment>Returns the value stored in the specified column ordinal as Double.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetDouble">GetDouble:</name>
            <comment>Returns the value stored in the specified column as Double.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetBlob2">GetBlob2:</name>
            <comment>Returns the value stored in the specified column ordinal as an array of bytes.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetBlob">GetBlob:</name>
            <comment>Returns the value stored in the specified column as an array of bytes.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Close">Close</name>
            <comment>Closes the ResultSet.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>ColumnCount</name>
            <comment>Returns the number of columns.</comment>
            <returntype>int</returntype>
        </property>
    </class>
    <version>1.3</version>
    <dependsOn>libsqlite3.dylib</dependsOn>
</root>
