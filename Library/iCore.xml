<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4IObjectWrapper</name>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IExceptionWrapper</name>
        <shortname>Exception</shortname>
        <objectwrapper>NSError*</objectwrapper>
        <comment>An object holding information about an exception.
LastException will hold the last exception caught in a Try / Catch block.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Description</name>
            <comment>Returns the error description.</comment>
            <returntype>NSString*</returntype>
        </property>
        <property>
            <name>Code</name>
            <comment>Returns the error code number.</comment>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Domain</name>
            <comment>Returns the error domain.</comment>
            <returntype>NSString*</returntype>
        </property>
    </class>
    <class>
        <name>B4IDateTime</name>
        <comment>Date and time related methods.
Date and time values are stored as ticks. Ticks represent the number of milliseconds since January 1, 1970 00:00:00 UTC.
This value is too large to be stored in an Int variable. It should only be stored in a Long variable.
DateUtils module should be used for time calculations when working with intervals larger than hours.</comment>
        <method>
            <name DesignerName="Date">Date:</name>
            <comment>Returns a string representation of the date (which is stored as ticks).
Example:&lt;code&gt;
Log("Today is: " &amp; DateTime.Date(DateTime.Now))
&lt;/code&gt;</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Time">Time:</name>
            <comment>Returns a string representation of the time (which is stored as ticks).
Example:&lt;code&gt;
Log("The time now is: " &amp; DateTime.Time(DateTime.Now))&lt;/code&gt;</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DateParse">DateParse:</name>
            <comment>Parses the given date string and returns its ticks representation.
Example:&lt;code&gt;
    Dim SomeTime As Long = DateTime.DateParse("02/23/2007")&lt;/code&gt;</comment>
            <returntype>long long</returntype>
            <parameter>
                <name>Date</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DateTimeParse">DateTimeParse::</name>
            <comment>Parses the given date and time strings and returns the ticks representation.</comment>
            <returntype>long long</returntype>
            <parameter>
                <name>Date</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Time</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetTimeZoneOffsetAt">GetTimeZoneOffsetAt:</name>
            <comment>Returns the offset measured in hours from UTC at the specified date.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetTimeZone">SetTimeZone:</name>
            <comment>Sets the process time zone.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>OffsetHours</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetYear">GetYear:</name>
            <comment>Returns the year component from the ticks value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetMonth">GetMonth:</name>
            <comment>Returns the month component from the ticks value. Values are between 1 to 12.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetDayOfMonth">GetDayOfMonth:</name>
            <comment>Returns the day of month component from the ticks value.
Values are between 1 to 31.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetDayOfYear">GetDayOfYear:</name>
            <comment>Returns the day of year component from the ticks value.
Values are between 1 to 366.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetDayOfWeek">GetDayOfWeek:</name>
            <comment>Returns the day of week component from the ticks value.
Values are between 1 to 7, where 1 means Sunday.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetHour">GetHour:</name>
            <comment>Returns the hour component from the ticks value.
Values are between 0 to 23.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetSecond">GetSecond:</name>
            <comment>Returns the seconds within minute component from the ticks value.
Values are between 0 to 59.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetMinute">GetMinute:</name>
            <comment>Returns the minutes within hour component from the ticks value.
Values are between 0 to 59.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Add">Add::::</name>
            <comment>Returns a ticks value which is the result of adding the specified time spans to the given ticks value.
Pass negative values to substract.
In most cases it is better to use DateUtils.AddPeriod.</comment>
            <returntype>long long</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long long</type>
            </parameter>
            <parameter>
                <name>Years</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Months</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Days</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>TicksPerSecond</name>
            <comment>Number of ticks per second (1000).</comment>
            <returntype>long long</returntype>
        </property>
        <property>
            <name>TicksPerDay</name>
            <comment>Number of ticks per 24 hours. In almost all cases it is better to use DateUtils module when working with days.
Note that there are days with less or more than 24 hours.</comment>
            <returntype>long long</returntype>
        </property>
        <property>
            <name>TicksPerMinute</name>
            <comment>Number of ticks per minute.</comment>
            <returntype>long long</returntype>
        </property>
        <property>
            <name>TicksPerHour</name>
            <comment>Number or ticks per hour.</comment>
            <returntype>long long</returntype>
        </property>
        <property>
            <name>Now</name>
            <comment>Returns the current time represented as the number of milliseconds since 1/1/1970 00:00 UTC.</comment>
            <returntype>long long</returntype>
        </property>
        <property>
            <name>DeviceDefaultDateFormat</name>
            <comment>Returns the device default date format.</comment>
            <returntype>NSString*</returntype>
        </property>
        <property>
            <name>DeviceDefaultTimeFormat</name>
            <comment>Returns the device default time format.</comment>
            <returntype>NSString*</returntype>
        </property>
        <property>
            <name>DateFormat</name>
            <comment>Gets or sets the process date format.
The default format is MM/dd/yyyy (04/23/2002 for example).
The patterns are the same as in B4A and B4J.
&lt;link&gt;Supported formats|http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns&lt;/link&gt;</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>p</name>
                <type>NSString*</type>
            </parameter>
        </property>
        <property>
            <name>TimeFormat</name>
            <comment>Gets or sets the process time format.
The default format is HH:mm:ss (23:45:12 for example).
The patterns are the same as in B4A and B4J.
&lt;link&gt;Supported formats|http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns&lt;/link&gt;</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>p</name>
                <type>NSString*</type>
            </parameter>
        </property>
        <property>
            <name>TimeZoneOffset</name>
            <comment>Returns the current offset measured in hours from UTC.</comment>
            <returntype>double</returntype>
        </property>
    </class>
    <class>
        <name>B4IWeakRef</name>
        <shortname>WeakRef</shortname>
        <comment>WeakRef object holds a weak reference to another object. This is useful to avoid a reference cycle memory leaks.</comment>
        <property>
            <name>Value</name>
            <comment>Gets or sets the weak referenced object. The value will be "Nulled" automatically when there are no more strong references to the target object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4ICommon</name>
        <method>
            <name DesignerName="LoadBitmap">LoadBitmap::</name>
            <comment>Loads a bitmap. Note that the file system is case sensitive.</comment>
            <returntype>B4IBitmap*</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Font">Font</name>
            <comment>Font related methods.</comment>
            <returntype>B4IFontWrapper*</returntype>
        </method>
        <method>
            <name DesignerName="Bit">Bit</name>
            <comment>Bit related methods.</comment>
            <returntype>B4IBit*</returntype>
        </method>
        <method>
            <name DesignerName="File">File</name>
            <comment>Files related methods.</comment>
            <returntype>B4IFile*</returntype>
        </method>
        <method>
            <name DesignerName="DateTime">DateTime</name>
            <comment>Date and time related methods.</comment>
            <returntype>B4IDateTime*</returntype>
        </method>
        <method>
            <name DesignerName="Colors">Colors</name>
            <comment>Colors related methods.</comment>
            <returntype>B4IColors*</returntype>
        </method>
        <method>
            <name DesignerName="Regex">Regex</name>
            <comment>Regular expressions related methods.</comment>
            <returntype>B4IRegex*</returntype>
        </method>
        <method>
            <name DesignerName="Not">Not:</name>
            <comment>Inverts the value of the given boolean.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Log">Log:</name>
            <comment>Logs a message. The message will be visible in the Logs tab in the IDE (in debug mode).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LogColor">LogColor::</name>
            <comment>Similar to Log. Sets the message color.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Message</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Abs">Abs:</name>
            <comment>Returns the absolute value.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Max">Max::</name>
            <comment>Returns the larger number between the two numbers.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number1</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>Number2</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Min">Min::</name>
            <comment>Returns the smaller number between the two numbers.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number1</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>Number2</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Sin">Sin:</name>
            <comment>Calculates the trigonometric sine function. Angle measured in radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Angle</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SinD">SinD:</name>
            <comment>Calculates the trigonometric sine function. Angle measured in degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Degrees</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Cos">Cos:</name>
            <comment>Calculates the trigonometric cosine function. Angle measured in radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Radians</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Tan">Tan:</name>
            <comment>Calculates the trigonometric tangent function. Angle measured in radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Radians</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="TanD">TanD:</name>
            <comment>Calculates the trigonometric tangent function. Angle measured in degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Degrees</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CosD">CosD:</name>
            <comment>Calculates the trigonometric cosine function. Angle measured in degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Degrees</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Sqrt">Sqrt:</name>
            <comment>Returns the positive square root.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ASin">ASin:</name>
            <comment>Returns the angle measured with radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ASinD">ASinD:</name>
            <comment>Returns the angle measured with degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ACos">ACos:</name>
            <comment>Returns the angle measured with radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ACosD">ACosD:</name>
            <comment>Returns the angle measured with degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ATan">ATan:</name>
            <comment>Returns the angle measured with radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Power">Power::</name>
            <comment>Returns the Base value raised to the Exponent power.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Base</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>Exponent</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ATanD">ATanD:</name>
            <comment>Returns the angle measured with degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ATan2">ATan2::</name>
            <comment>Returns the angle measured with radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Y</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>X</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ATan2D">ATan2D::</name>
            <comment>Returns the angle measured with degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Y</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>X</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Logarithm">Logarithm::</name>
            <comment>Returns the logarithm of the given Number.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>Base</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Round">Round:</name>
            <comment>Returns the whole number closest to the given number. In most cases it is better to use NumberFormat or NumberFormat2 instead.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Floor">Floor:</name>
            <comment>Returns the largest whole number that is smaller or equal to the specified number.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Ceil">Ceil:</name>
            <comment>Returns the smaller whole number that is larger or equal to the specified number.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Chr">Chr:</name>
            <comment>Returns the character that is represented by the given unicode value.</comment>
            <returntype>unichar</returntype>
            <parameter>
                <name>UnicodeValue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Asc">Asc:</name>
            <comment>Returns the unicode code point of the give character.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Char</name>
                <type>unichar</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="NumberFormat">NumberFormat:::</name>
            <comment>Converts the specified number to a string.
The string will include at least Minimum Integers and at most Maximum Fractions digits.
Example:&lt;code&gt;
Log(NumberFormat(12345.6789, 0, 2)) '"12,345.68"
Log(NumberFormat(1, 3, 0)) '"001"&lt;/code&gt;</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>MinimumIntegers</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>MaximumFractions</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="NumberFormat2">NumberFormat2:::::</name>
            <comment>Converts the specified number to a string.
The string will include at least Minimum Integers, at most Maximum Fractions digits and at least Minimum Fractions digits.
GroupingUsed - Whether to group every three integers.
Example:&lt;code&gt;
Log(NumberFormat2(12345.67, 0, 3, 3, False)) '"12345.670"&lt;/code&gt;</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>MinimumIntegers</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>MaximumFractions</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>MinimumFractions</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>GroupingUsed</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Sender">Sender:</name>
            <comment>Returns the object that raised the event. Only valid while inside the event sub.
Example:&lt;code&gt;
Sub Button1_Click
Dim b As Button = Sender
b.Text = "I've been clicked"
End Sub&lt;/code&gt;</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="IsNumber">IsNumber:</name>
            <comment>Tests whether the specified string can be safely parsed as a number.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Value</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Rnd">Rnd::</name>
            <comment>Returns a random integer between Min (inclusive) and Max (exclusive).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Min</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Max</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="PerXToCurrent">PerXToCurrent:</name>
            <comment>Returns the actual size of the given percentage of the page width.
This value is only exact while inside the Page_Resize event.
In other cases it is relative to the screen width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>Percentage</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="PerYToCurrent">PerYToCurrent:</name>
            <comment>Returns the actual size of the given percentage of the page height.
This value is only exact while inside the Page_Resize event.
In other cases it is relative to the screen height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>Percentage</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DipToCurrent">DipToCurrent:</name>
            <comment>The logical scale of iOS device is always 1.0. This method returns the value of Length.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="BytesToString">BytesToString::::</name>
            <comment>Decodes the given bytes array as a string.
Data - The bytes array.
StartOffset - The first byte to read.
Length - Number of bytes to read.
CharSet - The name of the character set.
Example:&lt;code&gt;
Dim s As String = BytesToString(Buffer, 0, Buffer.Length, "UTF-8")&lt;/code&gt;</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Data</name>
                <type>unsigned char[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CharSet</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CreateMap">CreateMap</name>
            <comment>Creates a Map with the given key / value pairs.
The syntax is: CreateMap(key1: value1, key2: value2, ...)
Example:&lt;code&gt;
Dim m As Map = CreateMap("January": 1, "February": 2)&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Is">Is</name>
            <comment>Tests whether the object is of the given type.
Note that when a number is converted to object it might change its type to a different type of number
(for example a Byte might be converted to an Int).
Example:&lt;code&gt;
For Each v As View in Page1.RootPanel.GetAllViewsRecursive
If v Is Button Then
 Dim b As Button = v
 b.Color = Colors.Blue
End If
Next&lt;/code&gt;</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="GetDeviceLayoutValues">GetDeviceLayoutValues</name>
            <comment>Returns the device LayoutValues.
Example:&lt;code&gt;
Log(GetDeviceLayoutValues)&lt;/code&gt;</comment>
            <returntype>B4ILayoutValues*</returntype>
        </method>
        <method>
            <name DesignerName="LastException">LastException</name>
            <comment>Returns the last exception that was caught.</comment>
            <returntype>B4IExceptionWrapper*</returntype>
        </method>
        <method>
            <name DesignerName="Msgbox" RaisesSynchronousEvents="true">Msgbox::</name>
            <comment>Shows a message box with the given message and title.
&lt;b&gt;The dialog is not a modal dialog.&lt;/b&gt; The code will not block.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Message</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Msgbox2" RaisesSynchronousEvents="true">Msgbox2:::::</name>
            <comment>Shows a message box with the given message and title.
&lt;b&gt;The dialog is not a modal dialog.&lt;/b&gt; The code will not block.
EventName - Sets the sub that will handle the Click event.
Message - The dialog message.
Title - The dialog title.
Buttons - A List of strings that will be used as buttons.
Example:&lt;code&gt;
Sub Page1_Click
Msgbox2("Msg", "Title", Do you want to do delete document?", Array ("Yes", "No"))
End Sub

Sub Msg_Click (ButtonText As String)
Log("User pressed on: " &amp; ButtonText)
End Sub&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Message</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Buttons</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CallSub" RaisesSynchronousEvents="true">CallSub:::</name>
            <comment>Dynamically calls a sub. This can be used to implement events.
In most cases you should not use CallSub and instead directly call the target sub.
Nothing happens if the sub does not exist.
Component - The target module or instance.
Sub - The sub name.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>mine</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>Component</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CallSub2" RaisesSynchronousEvents="true">CallSub2::::</name>
            <comment>Similar to CallSub. Calls a sub with a single argument.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>mine</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>Component</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Argument</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CallSub3" RaisesSynchronousEvents="true">CallSub3:::::</name>
            <comment>Similar to CallSub. Calls a sub with two arguments.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>mine</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>Component</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Argument1</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>Argument2</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CallSubDelayed">CallSubDelayed:::</name>
            <comment>Similar to CallSub.
Sends a message to the message queue. When the message is processed the sub is called.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mine</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>Component</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CallSubDelayed2">CallSubDelayed2::::</name>
            <comment>Similar to CallSubDelayed. Calls a sub with a single argument.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mine</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>Component</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Argument</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CallSubDelayed3">CallSubDelayed3:::::</name>
            <comment>Similar to CallSubDelayed. Calls a sub with two arguments.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mine</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>Component</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Argument1</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>Argument2</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SubExists">SubExists:::</name>
            <comment>Checks whether the given component has a sub with the given number of arguments.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Component</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>NumberOfArguments</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="IsDevTool">IsDevTool:</name>
            <comment>Returns true if ToolName equals "B4i".</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>ToolName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetType">GetType:</name>
            <comment>Returns the Objective C type of the given object.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Object</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SmartStringFormatter">SmartStringFormatter::</name>
            <comment>Internal keyword used by the Smart String literal.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Format</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Value</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Me">Me:</name>
            <comment>Returns a reference to the current instance or module.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Array">Array</name>
            <comment>Creates a single dimension array of the specified type.
The syntax is: Array As type (list of values).
Example:&lt;code&gt;
Dim Days() As String
Days = Array As String("Sunday", "Monday", ...)&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="If">If</name>
            <comment>Single line:
If condition Then true-statement [Else false-statement]
Multiline:
If condition Then
statement
Else If condition Then
statement
...
Else
statement
End If</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Try">Try</name>
            <comment>Any exception thrown inside a try block will be caught in the catch block.
Call LastException to get the caught exception.
Syntax:
Try
...
Catch
...
End Try</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Catch">Catch</name>
            <comment>Any exception thrown inside a try block will be caught in the catch block.
Call LastException to get the caught exception.
Syntax:
Try
...
Catch
...
End Try</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Dim">Dim</name>
            <comment>Declares a variable.
Syntax:
Declare a single variable:
Dim variable name [As type] [= expression]
The default type is String.

Declare multiple variables. All variables will be of the specified type.
Dim variable1 [= expression], variable2 [= expression], ..., [As type]
Note that the shorthand syntax only applies to Dim keyword.
Example:&lt;code&gt;Dim a = 1, b = 2, c = 3 As Int&lt;/code&gt;

Declare an array:
Dim variable(Rank1, Rank2, ...) [As type]
Example:&lt;code&gt;Dim Days(7) As String&lt;/code&gt;
The actual rank can be omitted for zero length arrays.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="While">While</name>
            <comment>Loops while the condition is true.
Syntax:
Do While condition
 ...
Loop</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Until">Until</name>
            <comment>Loops until the condition is true.
Syntax:
Do Until condition
 ...
Loop</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="For">For</name>
            <comment>Syntax:
For variable = value1 To value2 [Step interval]
...
Next
If the iterator variable was not declared before it will be of type Int.

Or:
For Each variable As type In collection
...
Next
Examples:&lt;code&gt;
For i = 1 To 10
Log(i) 'Will print 1 to 10 (inclusive).
Next
For Each n As Int In Numbers 'an array
Sum = Sum + n
Next
&lt;/code&gt;
Note that the loop limits will only be calculated once before the first iteration.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Type">Type</name>
            <comment>Declares a structure.
Can only be used inside sub Globals or sub Process_Globals.
Syntax:
Type type-name (field1, field2, ...)
Fields include name and type.
Example:&lt;code&gt;
Type MyType (Name As String, Items(10) As Int)
Dim a, b As MyType
a.Initialize
a.Items(2) = 123&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Return">Return</name>
            <comment>Returns from the current sub and optionally returns the given value.
Syntax: Return [value]</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Sub">Sub</name>
            <comment>Declares a sub with the parameters and return type.
Syntax: Sub name [(list of parameters)] [As return-type]
Parameters include name and type.
The lengths of arrays dimensions should not be included.
Example:&lt;code&gt;
Sub MySub (FirstName As String, LastName As String, Age As Int, OtherValues() As Double) As Boolean
...
End Sub&lt;/code&gt;
In this example OtherValues is a single dimension array.
The return type declaration is different than other declarations as the array parenthesis follow the type and not
the name (which does not exist in this case).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Select">Select</name>
            <comment>Compares a single value to multiple values.
Example:&lt;code&gt;
Dim value As Int = 7
Select value
 Case 1
  Log("One")
 Case 2, 4, 6, 8
  Log("Even")
 Case 3, 5, 7, 9
  Log("Odd")
 Case Else
  Log("Larger than 9")
End Select&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Exit">Exit</name>
            <comment>Exits the most inner loop.
Note that Exit inside a Select block will exit the Select block.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Continue">Continue</name>
            <comment>Stops executing the current iteration and continues with the next one.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>cPI</name>
            <comment>PI constant.</comment>
            <returntype>double</returntype>
        </property>
        <property>
            <name>True</name>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>False</name>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>Null</name>
            <returntype>NSObject*</returntype>
        </property>
        <property>
            <name>CRLF</name>
            <comment>New line character. The value of Chr(10).</comment>
            <returntype>NSString*</returntype>
        </property>
        <property>
            <name>TAB</name>
            <comment>Tab character.</comment>
            <returntype>NSString*</returntype>
        </property>
        <property>
            <name>QUOTE</name>
            <comment>Quote character - Chr(34).</comment>
            <returntype>NSString*</returntype>
        </property>
        <property>
            <name>cE</name>
            <comment>e (natural logarithm base) constant.</comment>
            <returntype>double</returntype>
        </property>
    </class>
    <class>
        <name>B4IColors</name>
        <shortname>Colors</shortname>
        <comment>A predefined object containing color constants.
Colors are represented as Int values. The first byte is the alpha level and the other three values are the R, G and B components.</comment>
        <method>
            <name DesignerName="RGB">RGB:::</name>
            <comment>Returns an integer value representing the color built from the three components.
Each component should be a value between 0 to 255 (inclusive). The alpha is set to 255.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>R</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>G</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>B</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ARGB">ARGB::::</name>
            <comment>Similar to RGB. Allows you to set the alpha level.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>A</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>R</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>G</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>B</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Black</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>DarkGray</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Gray</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>LightGray</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>White</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Red</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Green</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Blue</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Yellow</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Cyan</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Magenta</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Transparent</name>
            <returntype>int</returntype>
        </property>
    </class>
    <class>
        <name>B4IViewWrapper</name>
        <shortname>View</shortname>
        <objectwrapper>UIView*</objectwrapper>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
    </class>
    <class>
        <name>B4IControlWrapper</name>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>Enabled</name>
            <comment>Gets or sets whether the view is enabled.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IScrollView</name>
        <shortname>ScrollView</shortname>
        <objectwrapper>UIScrollView*</objectwrapper>
        <comment>ScrollView is a scrollable container. It can scroll horizontally and vertically (based on the inner-panel size).
ScrollView.Panel returns the inner-panel.
You should add views to this panel.
Note that ContentWidth and ContentHeight properties should be used when modifying the inner-panel size.</comment>
        <event>ScrollChanged (OffsetX As Int, OffsetY As Int)</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ScrollTo">ScrollTo:::</name>
            <comment>Scrolls to the given offsets.
Animated - Whether the scrolling should be animated.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>OffsetX</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Animated</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::::</name>
            <comment>Initializes the ScrollView.
EventName - Sets the subs that will handle the events.
Width - The inner-panel width.
Height - The inner-panel height.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>Panel</name>
            <comment>Returns the inner-panel.</comment>
            <returntype>B4IPanelWrapper*</returntype>
        </property>
        <property>
            <name>Bounces</name>
            <comment>Gets or sets whether a bounce effect is applied when the panel reaches one of the edges.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>PagingEnabled</name>
            <comment>If true then the ScrollView will automatically scroll to the nearest "page" which is a multiple of the ScrollView size.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>ContentWidth</name>
            <comment>Gets or sets the inner-panel width.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>ContentHeight</name>
            <comment>Gets or sets the inner-panel height.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>ScrollOffsetX</name>
            <comment>Gets or sets the current horizontal offset.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>ScrollOffsetY</name>
            <comment>Gets or sets the current vertical offset.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>ScrollEnabled</name>
            <comment>Gets or sets whether scrolling is enabled.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>ShowsHorizontalIndicator</name>
            <comment>Gets or sets whether to show the horizontal indicator during scrolling.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>ShowsVerticalIndicator</name>
            <comment>Gets or sets whether to show the vertical indicator during scrolling.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IPickerWrapper</name>
        <shortname>Picker</shortname>
        <objectwrapper>UIPickerView*</objectwrapper>
        <comment>A picker view based on a spinning wheel. A single view can show one or more columns (wheels).
Note that the height of this view cannot be changed.</comment>
        <event>ItemSelected (Column As Int, Row As Int)</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <comment>Initializes the picker and sets the subs that will handle the events.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetItems">SetItems::</name>
            <comment>Sets the items of the given column.
Column - Column index. 0 is the first column.
Items - A List (or array) with the items. Each item should be a String or an AttributedString.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Column</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Items</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetItems">GetItems:</name>
            <comment>Returns a list with the items in the specified index.</comment>
            <returntype>B4IList*</returntype>
            <parameter>
                <name>Column</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SelectRow">SelectRow:::</name>
            <comment>Sets the selected item.
Column - Column index.
Row - Row index.
Animated - If True then the wheel will animate the change.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Column</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Row</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Animated</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetSelectedRow">GetSelectedRow:</name>
            <comment>Returns the selected row in the specified column.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Column</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetSelectedItem">GetSelectedItem:</name>
            <comment>Returns the selected item in the specified column.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>Column</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColumnsWidths">SetColumnsWidths:</name>
            <comment>Sets the columns widths. For example if there are two columns:&lt;code&gt;
Picker1.SetColumnsWidths(Array (100, 200))&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Widths</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetRowsHeight">SetRowsHeight:</name>
            <comment>Sets the rows height. The default value is 30.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>RowHeight</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
    </class>
    <class>
        <name>B4IAttributedString</name>
        <shortname>AttributedString</shortname>
        <objectwrapper>NSAttributedString*</objectwrapper>
        <comment>A String with formatting attributes.
Note that an AttributedString cannot be used instead of String unless the method explicitly expects an AttributedString.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize:::</name>
            <comment>Initializes an AttributesString with the given Text, Font and Color.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Font</name>
                <type>B4IFontWrapper*</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ToString">ToString</name>
            <comment>Returns a regular string.</comment>
            <returntype>NSString*</returntype>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IButtonWrapper</name>
        <shortname>Button</shortname>
        <objectwrapper>UIButton*</objectwrapper>
        <comment>A Button view. There are two types of buttons: system buttons and custom buttons.
System buttons are created with one of the STYLE constants.
Custom buttons can be customized by accessing the CustomLabel property.</comment>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="InitializeCustom">InitializeCustom::::</name>
            <comment>Initializes a custom button. Sets the text default color and the pressed state color.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>TextColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>PressedTextColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize:::</name>
            <comment>Initializes a system button.
Example:&lt;code&gt;
Dim b1 As Button
b1.Initialize("b1", b1.STYLE_SYSTEM)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>Style1</name>
                <type>UIButtonType</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>Enabled</name>
            <comment>Gets or sets whether the view is enabled.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Text</name>
            <comment>Gets or sets the button's text.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>p</name>
                <type>NSString*</type>
            </parameter>
        </property>
        <property>
            <name>STYLE_SYSTEM</name>
            <returntype>UIButtonType</returntype>
        </property>
        <property>
            <name>STYLE_DETAIL_DISCLOSURE</name>
            <returntype>UIButtonType</returntype>
        </property>
        <property>
            <name>STYLE_INFO</name>
            <returntype>UIButtonType</returntype>
        </property>
        <property>
            <name>STYLE_CONTACT_ADD</name>
            <returntype>UIButtonType</returntype>
        </property>
        <property>
            <name>CustomLabel</name>
            <comment>Gets the inner label. You can use this property to customize custom buttons.</comment>
            <returntype>B4ILabelWrapper*</returntype>
        </property>
    </class>
    <class>
        <name>B4ISwitchWrapper</name>
        <shortname>Switch</shortname>
        <objectwrapper>UISwitch*</objectwrapper>
        <comment>A two states switch view. Note that the actual size of this view cannot be changed.
The ValueChanged event is raised when the state changes.</comment>
        <event>ValueChanged (Value As Boolean)</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <comment>Initializes the view.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetValueAnimated">SetValueAnimated:</name>
            <comment>Changes the current state. Animates the transition.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>Enabled</name>
            <comment>Gets or sets whether the view is enabled.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Value</name>
            <comment>Gets or sets the current state.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IWebViewWrapper</name>
        <shortname>WebView</shortname>
        <objectwrapper>UIWebView*</objectwrapper>
        <comment>A view with an embedded browser engine.
WebView can show online Urls or local html strings.
PageFinished event is raised after a page is loaded.
OverrideUrl is called before a page is loaded. If you return True from this method then the Url will not be loaded.</comment>
        <event>PageFinished (Success As Boolean, Url As String)</event>
        <event>OverrideUrl (Url As String) As Boolean</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <comment>Initializes the WebView.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CanGoBack">CanGoBack</name>
            <comment>Returns true if the WebView can navigate to the previous page.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CanGoForward">CanGoForward</name>
            <comment>Returns true if the WebView can navigate forward.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="GoBack">GoBack</name>
            <comment>Navigates to the previous page.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="GoForward">GoForward</name>
            <comment>Navigates to the next page in the stack of pages.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Release">Release</name>
            <comment>Releases internal resources. You should call this method before removing WebView from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="LoadUrl">LoadUrl:</name>
            <comment>Loads a url. Note that you cannot use this method to load files from the Assets folder.
Example:&lt;code&gt;
WebView1.LoadUrl("http://www.google.com")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Url</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LoadHtml">LoadHtml:</name>
            <comment>Loads the given html code. The path is relative to the assets folder.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Html</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>ScaleToFit</name>
            <comment>If True then the webpage is scaled to fit and zooming is enabled. Default value is false.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IStepperWrapper</name>
        <shortname>Stepper</shortname>
        <objectwrapper>UIStepper*</objectwrapper>
        <comment>A view that shows a + and - buttons that allow the user to increment of decrement a numeric value.
The value itself is not displayed (by this view).
You can change the color by changing the TintColor property.
ValueChanged event is raised when the value is changed.</comment>
        <event>ValueChanged (Value As Double)</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <comment>Initializes the stepper.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>Enabled</name>
            <comment>Gets or sets whether the view is enabled.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Value</name>
            <comment>Gets or sets the current value.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>p</name>
                <type>double</type>
            </parameter>
        </property>
        <property>
            <name>MaximumValue</name>
            <comment>Gets or sets the maximum value. Default value is 100.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>p</name>
                <type>double</type>
            </parameter>
        </property>
        <property>
            <name>MinimumValue</name>
            <comment>Gets or sets the minimum value. Default value is 0.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>p</name>
                <type>double</type>
            </parameter>
        </property>
        <property>
            <name>StepValue</name>
            <comment>Gets or sets the step value. Default value is 1.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>p</name>
                <type>double</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4ISliderWrapper</name>
        <shortname>Slider</shortname>
        <objectwrapper>UISlider*</objectwrapper>
        <comment>A horizontal bar with a thumb. The user can change the value by dragging the thumb.
The ValueChanged event is raised when the value is changed.
You can change the color by changing the TintColor property.</comment>
        <event>ValueChanged (Value As Float)</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <comment>Initializes the Slider.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>Enabled</name>
            <comment>Gets or sets whether the view is enabled.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Continuous</name>
            <comment>If False then the ValueChanged event will only be raised when the user releases the thumb.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Value</name>
            <comment>Gets or sets the current value.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>MaximumValue</name>
            <comment>Gets or sets the maximum value. The default value is 1.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>MinimumValue</name>
            <comment>Gets or sets the minimum value. The default value is 0.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4ISegmentedControlWrapper</name>
        <shortname>SegmentedControl</shortname>
        <objectwrapper>UISegmentedControl*</objectwrapper>
        <comment>A horizontal control that shows multiple titles.</comment>
        <event>IndexChanged (Index As Int)</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetItems">SetItems:</name>
            <comment>Sets the control titles.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Items</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetItems">GetItems</name>
            <comment>Gets a List with the control titles.</comment>
            <returntype>B4IList*</returntype>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>Enabled</name>
            <comment>Gets or sets whether the view is enabled.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Momentary</name>
            <comment>If true then the control does not show the selected item. Default value is false.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>SelectedIndex</name>
            <comment>Gets or sets the selected index. -1 means that no item is selected.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IActionSheetWrapper</name>
        <shortname>ActionSheet</shortname>
        <objectwrapper>UIActionSheet*</objectwrapper>
        <comment>ActionSheet allows the user to select an item from a list of items.
On iPhone devices the list usually slides up from the bottom of the screen.
On iPad devices the list appears anchored to the ParentView.
The list can optionally show a "cancel" item and a "destructive" item. These items will show with a different color.</comment>
        <event>Click (Item As String)</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::::::</name>
            <comment>Initializes the ActionSheet and sets the items.
EventName - Sets the sub that will handle the Click event.
Title - The sheet title. Note that Apple guidelines recommend not to use a title.
CancelItem - An item that will appear in black color.
DestructiveItem - An item that will appear in red color.
OtherItems - A List (or array) with all other items.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>CancelItem</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>DestructiveItem</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>OtherItems</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Show" RaisesSynchronousEvents="true">Show:</name>
            <comment>Shows the ActionSheet. The sheet will be anchored to the ParentView (on iPad devices).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ParentView</name>
                <type>UIView*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Dismiss">Dismiss</name>
            <comment>Dismisses the sheet.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Returns true if the sheet is currently visible.</comment>
            <returntype>BOOL</returntype>
        </property>
    </class>
    <class>
        <name>B4IActivityIndicatorWrapper</name>
        <shortname>ActivityIndicator</shortname>
        <objectwrapper>UIActivityIndicatorView*</objectwrapper>
        <comment>A spinning indicator, similar to Android indeterminate progress bar.</comment>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize:</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the indicator color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>STYLE_WHITE_LARGE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>STYLE_WHITE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>STYLE_GRAY</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Style</name>
            <comment>Gets or sets the indicator style. One of the STYLE constants.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IProgressWrapper</name>
        <shortname>ProgressView</shortname>
        <objectwrapper>UIProgressView*</objectwrapper>
        <comment>A horizontal view that displays the progress of a task to the user.
The progress is a value between 0 to 1.</comment>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize:</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetProgressAnimated">SetProgressAnimated:</name>
            <comment>Sets the current progress with animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Progress</name>
                <type>float</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>Progress</name>
            <comment>Gets or sets the current progress (0 to 1).</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4ITextInputTraitsWrapper</name>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SelectionLength">SelectionLength</name>
            <comment>Returns the text selection length. Use SetSelection method if you want to set the selection.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="SelectAll">SelectAll</name>
            <comment>Selects all text.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetSelection">SetSelection::</name>
            <comment>Sets the selected text.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>AUTOCORRECT_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCORRECT_NO</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCORRECT_YES</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>SPELLCHECK_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>SPELLCHECK_NO</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>SPELLCHECK_YES</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCAPITALIZE_NONE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCAPITALIZE_WORDS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCAPITALIZE_SENTENCES</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCAPITALIZE_ALL</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_ASCII_CAPABLE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_NUMBERS_AND_PUNCTUATIONS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_URL</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_NUMBER_PAD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_PHONE_PAD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_NAME_PHONE_PAD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_EMAIL_ADDRESS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_DECIMAL_PAD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_WEB_SEARCH</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>APPEARANCE_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>APPEARANCE_DARK</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>APPEARANCE_LIGHT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_GO</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_NEXT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_SEARCH</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_SEND</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_DONE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Autocorrect</name>
            <comment>Gets or sets the keyboard auto-correct mode (one of the AUTOCORRECT constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>KeyboardType</name>
            <comment>Gets or sets the keyboard type (one of the TYPE constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>KeyboardAppearance</name>
            <comment>Gets or sets the keyboard appearance (one of the APPEARANCE constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Autocapitalize</name>
            <comment>Gets or sets the autocapitalize mode (one of the AUTOCAPITALIZE constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>ReturnKey</name>
            <comment>Gets or sets the return key (one of the RETURN constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>PasswordMode</name>
            <comment>Set to true to change the text field to password mode.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>SelectionStart</name>
            <comment>Gets or sets the selection start position.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4ITextViewWrapper</name>
        <shortname>TextView</shortname>
        <objectwrapper>UITextView*</objectwrapper>
        <comment>A multiline, scrollable text field.
The keyboard appears automatically when a text field is focused.
You need to call TextView.ResignFocus to hide the keyboard.</comment>
        <event>TextChanged (OldText As String, NewText As String)</event>
        <event>BeginEdit</event>
        <event>EndEdit</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SelectionLength">SelectionLength</name>
            <comment>Returns the text selection length. Use SetSelection method if you want to set the selection.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="SelectAll">SelectAll</name>
            <comment>Selects all text.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetSelection">SetSelection::</name>
            <comment>Sets the selected text.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ScrollTo">ScrollTo:</name>
            <comment>Scrolls to the specified index.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>AUTOCORRECT_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCORRECT_NO</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCORRECT_YES</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>SPELLCHECK_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>SPELLCHECK_NO</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>SPELLCHECK_YES</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCAPITALIZE_NONE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCAPITALIZE_WORDS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCAPITALIZE_SENTENCES</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCAPITALIZE_ALL</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_ASCII_CAPABLE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_NUMBERS_AND_PUNCTUATIONS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_URL</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_NUMBER_PAD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_PHONE_PAD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_NAME_PHONE_PAD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_EMAIL_ADDRESS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_DECIMAL_PAD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_WEB_SEARCH</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>APPEARANCE_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>APPEARANCE_DARK</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>APPEARANCE_LIGHT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_GO</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_NEXT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_SEARCH</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_SEND</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_DONE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Autocorrect</name>
            <comment>Gets or sets the keyboard auto-correct mode (one of the AUTOCORRECT constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>KeyboardType</name>
            <comment>Gets or sets the keyboard type (one of the TYPE constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>KeyboardAppearance</name>
            <comment>Gets or sets the keyboard appearance (one of the APPEARANCE constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Autocapitalize</name>
            <comment>Gets or sets the autocapitalize mode (one of the AUTOCAPITALIZE constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>ReturnKey</name>
            <comment>Gets or sets the return key (one of the RETURN constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>PasswordMode</name>
            <comment>Set to true to change the text field to password mode.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>SelectionStart</name>
            <comment>Gets or sets the selection start position.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Text</name>
            <comment>Gets or sets the text.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>p</name>
                <type>NSString*</type>
            </parameter>
        </property>
        <property>
            <name>TextColor</name>
            <comment>Gets or sets the text color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Font</name>
            <comment>Gets or sets the font.</comment>
            <returntype>B4IFontWrapper*</returntype>
            <parameter>
                <name>p</name>
                <type>B4IFontWrapper*</type>
            </parameter>
        </property>
        <property>
            <name>ALIGNMENT_LEFT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ALIGNMENT_RIGHT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ALIGNMENT_CENTER</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TextAlignment</name>
            <comment>Gets or sets the text alignment (one of the ALIGNMENT constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Editable</name>
            <comment>Gets or sets whether the field is editable.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4ITabBarItemItemWrapper</name>
        <shortname>TabBarItem</shortname>
        <objectwrapper>UITabBarItem*</objectwrapper>
        <comment>This item is assigned to a Page. When the Page is added to a TabBarController the item appears in the tab's bar.
The item is made of a text and image. You can also select one of the system items.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="SetTitleOffset">SetTitleOffset::</name>
            <comment>Sets the horizontal and vertical offsets.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>X</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize:::</name>
            <comment>Initializes the item with the given title, image and the selected image.
Note that the images colors are ignored. Only the alpha values are used.
Title - The item title. Pass empty string if no title should be displayed.
Image - The item image. Pass Null if no image should be displayed. The image size should be 30x30.
SelectedImage - The image to display when the item is selected.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Title</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Image</name>
                <type>B4IBitmap*</type>
            </parameter>
            <parameter>
                <name>SelectedImage</name>
                <type>B4IBitmap*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="InitializeSystem">InitializeSystem:</name>
            <comment>Initializes an item with one of the predefined system items (ITEM constants).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Type</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetFont">SetFont:</name>
            <comment>Sets the title font.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Font</name>
                <type>B4IFontWrapper*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>ITEM_MORE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_FAVORITES</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_TOP_RATED</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_RECENTS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_CONTACTS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_HISTORY</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_BOOKMARKS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_SEARCH</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_DOWNLOADS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_MOST_RECENT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_MOST_VIEWED</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Enabled</name>
            <comment>Gets or sets whether the item is enabled.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Badge</name>
            <comment>Gets or sets the "badge" that is displayed above the item.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>p</name>
                <type>NSString*</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IBarButtonItemWrapper</name>
        <shortname>BarButton</shortname>
        <objectwrapper>UIBarButtonItem*</objectwrapper>
        <comment>BarButtons are assigned to Pages. These buttons appear when a Page is added to a NavigationConroller.
There are four types of bar buttons: custom, text, bitmap or system.
You can use the designer to create these buttons.
Note that the designer adds "flexible space" items between each two buttons automatically.
The Tag value is important as it is used to distinguish between the buttons in the Page_BarButtonClick event.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="InitializeSystem">InitializeSystem::</name>
            <comment>Initializes a system button with one of the ITEM constants.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Type</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Tag</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="InitializeText">InitializeText::</name>
            <comment>Initializes a text button.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Tag</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="InitializeBitmap">InitializeBitmap::</name>
            <comment>Initializes a bitmap button.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>UIImage*</type>
            </parameter>
            <parameter>
                <name>Tag</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="InitializeCustom">InitializeCustom:</name>
            <comment>Initializes a bar button made of a custom view.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>View</name>
                <type>UIView*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetFont">SetFont:</name>
            <comment>Sets the button font.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Font</name>
                <type>B4IFontWrapper*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>ITEM_DONE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_CANCEL</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_EDIT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_SAVE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_ADD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_FLEXIBLE_SPACE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_COMPOSE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_REPLY</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_ACTION</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_ORGANIZE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_BOOKMARKS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_SEARCH</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_REFRESH</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_STOP</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_CAMERA</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_TRASH</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_PLAY</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_PAUSE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_REWIND</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_FASTFORWARD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_UNDO</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ITEM_REDO</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the button color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Enabled</name>
            <comment>Gets or sets whether the button is enabled.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4ITextFieldWrapper</name>
        <shortname>TextField</shortname>
        <objectwrapper>UITextField*</objectwrapper>
        <comment>A single line text field.
The keyboard appears automatically when a text field is focused.
You need to call TextField.ResignFocus to hide the keyboard.</comment>
        <event>TextChanged (OldText As String, NewText As String)</event>
        <event>EnterPressed</event>
        <event>BeginEdit</event>
        <event>EndEdit</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SelectionLength">SelectionLength</name>
            <comment>Returns the text selection length. Use SetSelection method if you want to set the selection.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="SelectAll">SelectAll</name>
            <comment>Selects all text.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetSelection">SetSelection::</name>
            <comment>Sets the selected text.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>AUTOCORRECT_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCORRECT_NO</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCORRECT_YES</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>SPELLCHECK_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>SPELLCHECK_NO</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>SPELLCHECK_YES</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCAPITALIZE_NONE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCAPITALIZE_WORDS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCAPITALIZE_SENTENCES</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>AUTOCAPITALIZE_ALL</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_ASCII_CAPABLE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_NUMBERS_AND_PUNCTUATIONS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_URL</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_NUMBER_PAD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_PHONE_PAD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_NAME_PHONE_PAD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_EMAIL_ADDRESS</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_DECIMAL_PAD</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TYPE_WEB_SEARCH</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>APPEARANCE_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>APPEARANCE_DARK</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>APPEARANCE_LIGHT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_DEFAULT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_GO</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_NEXT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_SEARCH</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_SEND</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>RETURN_DONE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Autocorrect</name>
            <comment>Gets or sets the keyboard auto-correct mode (one of the AUTOCORRECT constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>KeyboardType</name>
            <comment>Gets or sets the keyboard type (one of the TYPE constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>KeyboardAppearance</name>
            <comment>Gets or sets the keyboard appearance (one of the APPEARANCE constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Autocapitalize</name>
            <comment>Gets or sets the autocapitalize mode (one of the AUTOCAPITALIZE constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>ReturnKey</name>
            <comment>Gets or sets the return key (one of the RETURN constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>PasswordMode</name>
            <comment>Set to true to change the text field to password mode.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>SelectionStart</name>
            <comment>Gets or sets the selection start position.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Text</name>
            <comment>Gets or sets the text.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>p</name>
                <type>NSString*</type>
            </parameter>
        </property>
        <property>
            <name>TextColor</name>
            <comment>Gets or sets the text color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Font</name>
            <comment>Gets or sets the text font.</comment>
            <returntype>B4IFontWrapper*</returntype>
            <parameter>
                <name>p</name>
                <type>B4IFontWrapper*</type>
            </parameter>
        </property>
        <property>
            <name>AdjustFontSizeToFit</name>
            <comment>If true then the font size is adjusted automatically to make room for all the text.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Enabled</name>
            <comment>Gets or sets whether the field is enabled.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>ALIGNMENT_LEFT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ALIGNMENT_RIGHT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ALIGNMENT_CENTER</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>HintText</name>
            <comment>Gets or sets the hint that appears when no text is set.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>p</name>
                <type>NSString*</type>
            </parameter>
        </property>
        <property>
            <name>TextAlignment</name>
            <comment>Gets or sets the text alignment (one of the ALIGNMENT constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>BorderStyle</name>
            <comment>Gets or sets the border style (one of the STYLE constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>STYLE_NONE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>STYLE_LINE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>STYLE_BEZEL</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>STYLE_ROUNDEDRECT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ShowClearButton</name>
            <comment>Gets or sets whether the clear button is visible when the field is focused.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IDatePickerWrapper</name>
        <shortname>DatePicker</shortname>
        <objectwrapper>UIDatePicker*</objectwrapper>
        <comment>A view that allows the user to pick a date or time (or both).</comment>
        <event>ValueChanged</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetValidRange">SetValidRange::</name>
            <comment>Limits the dates to the given range.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>MinTicks</name>
                <type>long long</type>
            </parameter>
            <parameter>
                <name>MaxTicks</name>
                <type>long long</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>MODE_TIME</name>
            <comment>Time picker mode.</comment>
            <returntype>int</returntype>
        </property>
        <property>
            <name>MODE_DATE</name>
            <comment>Date picker mode.</comment>
            <returntype>int</returntype>
        </property>
        <property>
            <name>MODE_DATE_TIME</name>
            <comment>Date and time picker mode.</comment>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Ticks</name>
            <comment>Gets or sets the selected date (and time).</comment>
            <returntype>long long</returntype>
            <parameter>
                <name>p</name>
                <type>long long</type>
            </parameter>
        </property>
        <property>
            <name>MinuteInterval</name>
            <comment>Gets or sets the minute wheel interval. The value should be evenly divided into 60.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Mode</name>
            <comment>Gets or sets the picker mode. Should be one of the MODE constants.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4ILabelWrapper</name>
        <shortname>Label</shortname>
        <objectwrapper>UILabel*</objectwrapper>
        <comment>A view that shows readonly text.</comment>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>Text</name>
            <comment>Gets or sets the label text.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>p</name>
                <type>NSString*</type>
            </parameter>
        </property>
        <property>
            <name>TextColor</name>
            <comment>Gets or sets the text color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Font</name>
            <comment>Gets or sets the label font.</comment>
            <returntype>B4IFontWrapper*</returntype>
            <parameter>
                <name>p</name>
                <type>B4IFontWrapper*</type>
            </parameter>
        </property>
        <property>
            <name>Multiline</name>
            <comment>Gets or sets whether the label should show multiple lines.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>AdjustFontSizeToFit</name>
            <comment>If true then the label will adjust the font size to make room for all the text.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>ALIGNMENT_LEFT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ALIGNMENT_RIGHT</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ALIGNMENT_CENTER</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>TextAlignment</name>
            <comment>Gets or sets the text alignment (one of the ALIGNMENT constants).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IFontWrapper</name>
        <shortname>Font</shortname>
        <objectwrapper>UIFont</objectwrapper>
        <comment>Font is a predefined object that provides access to the device installed fonts.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CreateNew">CreateNew:</name>
            <comment>Creates a new font with the specified size (based on the default font).</comment>
            <returntype>B4IFontWrapper*</returntype>
            <parameter>
                <name>Size1</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CreateNew2">CreateNew2::</name>
            <comment>Creates a new font with the specified size and font name.</comment>
            <returntype>B4IFontWrapper*</returntype>
            <parameter>
                <name>Name</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Size1</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CreateNewBold">CreateNewBold:</name>
            <comment>Creates a new bold font with the specified size (based on the default font).</comment>
            <returntype>B4IFontWrapper*</returntype>
            <parameter>
                <name>Size1</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CreateNewItalic">CreateNewItalic:</name>
            <comment>Creates a new italic font with the specified size (based on the default font).</comment>
            <returntype>B4IFontWrapper*</returntype>
            <parameter>
                <name>Size1</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="AvailableNames">AvailableNames</name>
            <comment>Returns an array of strings with all available fonts names.</comment>
            <returntype>NSString[]</returntype>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>DEFAULT</name>
            <comment>Returns the default font.</comment>
            <returntype>B4IFontWrapper*</returntype>
        </property>
        <property>
            <name>DEFAULT_BOLD</name>
            <comment>Returns the default bold font.</comment>
            <returntype>B4IFontWrapper*</returntype>
        </property>
        <property>
            <name>DEFAULT_ITALIC</name>
            <comment>Returns the default italic font.</comment>
            <returntype>B4IFontWrapper*</returntype>
        </property>
        <property>
            <name>Name</name>
            <comment>Returns the font name.</comment>
            <returntype>NSString*</returntype>
        </property>
        <property>
            <name>Size</name>
            <comment>Returns the font size.</comment>
            <returntype>float</returntype>
        </property>
    </class>
    <class>
        <name>B4IPage</name>
        <shortname>Page</shortname>
        <objectwrapper>UIViewController*</objectwrapper>
        <comment>A page is a container that contains other views.
The main element of a page is the RootPanel. With this panel you can add or remove views.
Note that the "Event Name" of the RootPanel is the same as the Page's Event Name.
You can use a NavigationController or a TabController to manage multiple pages.</comment>
        <event>Appear</event>
        <event>Disappear</event>
        <event>BarButtonClick (Tag As String)</event>
        <event>KeyboardStateChanged (Height As Float)</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes focus from all views on this page. This will hide the keyboard if it is visible.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Title</name>
            <comment>Gets or sets the page title. This title appears in the navigation bar when a NavigationController is used.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>p</name>
                <type>NSString*</type>
            </parameter>
        </property>
        <property>
            <name>Prompt</name>
            <comment>Gets or sets the page prompt. This text will appear under the title.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>p</name>
                <type>NSString*</type>
            </parameter>
        </property>
        <property>
            <name>HideBackButton</name>
            <comment>If false then the back button will appear when this page is the top page and there are other pages in the back. Default value is false.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>RootPanel</name>
            <comment>Gets a reference to the main panel that holds the other views.</comment>
            <returntype>B4IPanelWrapper*</returntype>
        </property>
        <property>
            <name>ToolbarButtons</name>
            <comment>Gets or sets an array of BarButtons that will appear in the Toolbar (if it is visible).
Note that you should set a new list or array in order to update the buttons as the returned list is a copy of the internal list.</comment>
            <returntype>B4IList*</returntype>
            <parameter>
                <name>p</name>
                <type>B4IList*</type>
            </parameter>
        </property>
        <property>
            <name>TopRightButtons</name>
            <comment>Gets or sets an array of BarButtons that will appear near the top-right corner (if the navigation bar is visible).
Note that you should set a new list or array in order to update the buttons as the returned list is a copy of the internal list.</comment>
            <returntype>B4IList*</returntype>
            <parameter>
                <name>p</name>
                <type>B4IList*</type>
            </parameter>
        </property>
        <property>
            <name>TopLeftButtons</name>
            <comment>Gets or sets an array of BarButtons that will appear near the top-left corner (if the navigation bar is visible).
Note that you should set a new list or array in order to update the buttons as the returned list is a copy of the internal list.</comment>
            <returntype>B4IList*</returntype>
            <parameter>
                <name>p</name>
                <type>B4IList*</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Returns true if this page is currently visible.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>TabBarItem</name>
            <comment>Gets or sets the TabBarItem that will appear when this page is added to a TabBarController.</comment>
            <returntype>B4ITabBarItemItemWrapper*</returntype>
            <parameter>
                <name>p</name>
                <type>B4ITabBarItemItemWrapper*</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4INavigationControllerWrapper</name>
        <shortname>NavigationController</shortname>
        <objectwrapper>UINavigationController*</objectwrapper>
        <comment>A controller that manages a set of pages in a stack.
This is the default controller. It can optionally show a navigation bar (at the top) and a toolbar (at the bottom).
The items in these bars are set by the current visible page.
When you call ShowPage the page is added to the top of the stack.
If the page is already in the stack then all the pages above it will be removed.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="SetNavigationBarVisibleAnimated">SetNavigationBarVisibleAnimated:</name>
            <comment>Similar to setting the NavigationBarVisible. Hides or shows the bar with animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Visible</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetPagesStack">SetPagesStack:</name>
            <comment>Clears the current stack and sets a new stack of pages. This can be useful when you restore the state of an app.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Pages</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ShowPage">ShowPage:</name>
            <comment>Adds a page to the top of the stack. If the page is already in the stack then all pages above it will be removed.
The transition will be animated.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Page</name>
                <type>UIViewController*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ShowPage2">ShowPage2::</name>
            <comment>Similar to ShowPage.
Animated - Whether the transition will be animated or not.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Page</name>
                <type>UIViewController*</type>
            </parameter>
            <parameter>
                <name>Animated</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RemoveCurrentPage">RemoveCurrentPage</name>
            <comment>Removes the current top page from the stack. The transition will be animated.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RemoveCurrentPage2">RemoveCurrentPage2:</name>
            <comment>Similar to RemoveCurrentPage.
Animated - Whether the transition will be animated or not.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Animated</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>NavigationBarVisible</name>
            <comment>Gets or sets whether the navigation bar is visible. Default value is true.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>ToolBarVisible</name>
            <comment>Gets or sets whether the tool bar (bottom bar) is visible. Default value is false.
Note that you should first show a page and only then add the toolbar.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IPageViewControllerWrapper</name>
        <shortname>PageViewController</shortname>
        <objectwrapper>UIPageViewController*</objectwrapper>
        <comment>A controller that contains other pages and allows the user to switch pages by swiping right or left.
Set this controller by assigning App.KeyController.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="SetSelectedPage">SetSelectedPage:</name>
            <comment>Sets the current selected (visible) page.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>PageIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize:::</name>
            <comment>Initializes the controller and sets the child pages.
EventName - Sets the subs that will handle the events. Currently this parameter is not used.
Pages - A List (or Array) with the child pages.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Pages</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4ITabBarControllerWrapper</name>
        <shortname>TabBarController</shortname>
        <objectwrapper>UITabBarController*</objectwrapper>
        <comment>A root controller that contains other pages and allows the user to select the current page by clicking on the tab bar.
Set this controller by assigning it to App.KeyController.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>SelectedIndex</name>
            <comment>Gets or sets the current selected index.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Pages</name>
            <comment>Gets or sets the tab pages.</comment>
            <returntype>B4IList*</returntype>
            <parameter>
                <name>p</name>
                <type>B4IList*</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IStringBuilder</name>
        <shortname>StringBuilder</shortname>
        <objectwrapper>NSMutableString*</objectwrapper>
        <comment>A mutable string, unlike regular strings which are immutable.
StringBuilder allows you to quickly concatenate strings and modify the content.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize</name>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Append">Append:</name>
            <comment>Appends the specified text to the StringBuilder and returns the current StringBuilder.</comment>
            <returntype>B4IStringBuilder*</returntype>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ToString">ToString</name>
            <comment>Converts the StringBuilder content to a regular string.</comment>
            <returntype>NSString*</returntype>
        </method>
        <method>
            <name DesignerName="Remove">Remove::</name>
            <comment>Removes the characters between StartOffset (inclusive) and EndOffset (exclusive) and returns the current StringBuilder.</comment>
            <returntype>B4IStringBuilder*</returntype>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>EndOffset</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Insert">Insert::</name>
            <comment>Inserts the given Text at the specified Offset and returns the current StringBuilder.</comment>
            <returntype>B4IStringBuilder*</returntype>
            <parameter>
                <name>Offset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Length</name>
            <comment>Returns the string length.</comment>
            <returntype>int</returntype>
        </property>
    </class>
    <class>
        <name>B4IList</name>
        <shortname>List</shortname>
        <objectwrapper>NSArray*</objectwrapper>
        <comment>List is similar to a dynamic array of objects. You can add, insert or remove items from the list.
Note that arrays are converted to lists automatically when needed.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize</name>
            <comment>Initializes an empty list.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Initialize2">Initialize2:</name>
            <comment>Initializes a list that wraps the given array.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Array</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="IsReadOnly">IsReadOnly</name>
            <comment>Tests whether the list is readonly. A list that is returned from a library call might be read-only.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Clear">Clear</name>
            <comment>Removes all items from the list.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Add">Add:</name>
            <comment>Adds an item to the end of the list.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Item</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="AddAll">AddAll:</name>
            <comment>Adds all the items from one list to the end of this list.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>List</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="AddAllAt">AddAllAt::</name>
            <comment>Adds all items from one list to this list, starting at the specified index.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>List</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RemoveAt">RemoveAt:</name>
            <comment>Removes the item in the specified index.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="InsertAt">InsertAt::</name>
            <comment>Inserts an item in the specified index.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Item</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Get">Get:</name>
            <comment>Returns the item in the specified index.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Set">Set::</name>
            <comment>Sets the item in the specified index.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Item</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="IndexOf">IndexOf:</name>
            <comment>Returns the index of the specified item. Returns -1 if the item was not found.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Item</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Sort">Sort:</name>
            <comment>Sorts the list. If the first item in the in the list is a number then the list will be numerically sorted.
Otherwise the list will be lexicographically sorted.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Ascending</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SortCaseInsensitive">SortCaseInsensitive:</name>
            <comment>Similar to Sort. Ignores the strings case.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Ascending</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SortType">SortType::</name>
            <comment>Sorts a list with items of user defined type. The list is sorted based on the specified field.
FieldName - The case-sensitive field name that will be used for sorting. Field must contain numbers of strings.
Ascending - Whether to sort ascending or descending.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>FieldName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Ascending</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SortTypeCaseInsensitive">SortTypeCaseInsensitive::</name>
            <comment>Similar to SortType. Ignores the strings case when sorting.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>FieldName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Ascending</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Size</name>
            <returntype>int</returntype>
        </property>
    </class>
    <class>
        <name>B4IMatcher</name>
        <shortname>Matcher</shortname>
        <comment>A Matcher object is used to search for a pattern in a string.</comment>
        <method>
            <name DesignerName="Find">Find</name>
            <comment>Searches for the next substring that matches the pattern.
Returns True if a match was found.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Group">Group:</name>
            <comment>Returns the captured group with the specified index. Group 0 returns the full match.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetStart">GetStart:</name>
            <comment>Returns the start offset of the specified captured group.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetEnd">GetEnd:</name>
            <comment>Returns the end offset of the specified captured group.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>GroupCount</name>
            <comment>Returns the number of groups.</comment>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Match</name>
            <comment>Returns the matched string (same as Group(0)).</comment>
            <returntype>NSString*</returntype>
        </property>
    </class>
    <class>
        <name>B4IRegex</name>
        <comment>Regex is a predefined object that contains regular expressions related methods.
All methods receive a 'pattern' string. This is the regular expression pattern.</comment>
        <method>
            <name DesignerName="IsMatch">IsMatch::</name>
            <comment>Tests whether the given text is a match for the given pattern.
The whole text should match the pattern. Use matcher to search for a substring that matches the pattern.
Note that it will return False for empty strings.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Pattern</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="IsMatch2">IsMatch2:::</name>
            <comment>Similar to IsMatch. Allows you to set the pattern options.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Pattern</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Options</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Replace">Replace:::</name>
            <comment>Replaces all the matches in the text based on the specified pattern and template.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Pattern</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Template</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Replace2">Replace2::::</name>
            <comment>Similar to Replace. Allows you to set the pattern options.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Pattern</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Options</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Template</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Matcher">Matcher::</name>
            <comment>Creates a Matcher that can be used to search for matching substrings in the text.</comment>
            <returntype>B4IMatcher*</returntype>
            <parameter>
                <name>Pattern</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Matcher2">Matcher2:::</name>
            <comment>Similar to Matcher. Allows you to set the pattern options.</comment>
            <returntype>B4IMatcher*</returntype>
            <parameter>
                <name>Pattern</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Options</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Split">Split::</name>
            <comment>Splits the text to an array of strings based on the given pattern.</comment>
            <returntype>string[]</returntype>
            <parameter>
                <name>Pattern</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Split2">Split2:::</name>
            <comment>Similar to Split. Allows you to set the pattern options.</comment>
            <returntype>string[]</returntype>
            <parameter>
                <name>Pattern</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Options</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>MULTILINE</name>
            <comment>Changes ^ and $ to match the start and end of each line instead of the whole string.</comment>
            <returntype>int</returntype>
        </property>
        <property>
            <name>CASE_INSENSITIVE</name>
            <comment>Enables case insensitive matching.</comment>
            <returntype>int</returntype>
        </property>
    </class>
    <class>
        <name>B4IApplicationWrapper</name>
        <shortname>Application</shortname>
        <objectwrapper>UIApplication*</objectwrapper>
        <comment>Application is a special singleton object that allows you to handle application related events and
holds other application related methods.
The events can only be handled in the main module. The subs prefix should be Application.
The Start event is raised when the application starts. Nav is the default navigation controller.
The Active event is raised when the application becomes active. It is usually raised immediately after Start event and after resuming from the background.
The InActive event is raised when the applications becomes inactive.
This happens when there is an interruption such as a phone call or before the Background event.
The Background event is raised when the process is moved to the background. You should expect the process to be killed a few seconds after this event.
The Foreground event is raised when the app returns to the foreground after it was in the background (assuming that the process was not killed).
The OpenUrl event is raised when another app has called OpenUrl with a scheme that this app has registered.</comment>
        <event>Start (Nav As NavigationController)</event>
        <event>Active</event>
        <event>Inactive</event>
        <event>Background</event>
        <event>OpenUrl (Url As String, Data As Object) As Boolean</event>
        <event>Foreground</event>
        <event>ReceiveLocalNotification (LN As Notification)</event>
        <event>PushToken (Success As Boolean, Token() As Byte)</event>
        <event>RemoteNotification (Message As Map)</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="IsSimulator">IsSimulator</name>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CanOpenURL">CanOpenURL:</name>
            <comment>Returns true if there is an app that can open the given url.
Starting from iOS 9 you need to use the #QueriesScheme to list the schemes that will be passed to this method.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Url</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="OpenURL">OpenURL:</name>
            <comment>Sends the Url to the system. If there is an app registered to the Url scheme then the app will be started.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Url</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="OpenURLAsync">OpenURLAsync:</name>
            <comment>Calls OpenUrl from a background thread. This is useful as OpenURL can sometimes take several seconds to complete.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Url</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RegisterUserNotifications">RegisterUserNotifications:::</name>
            <comment>Requests the user permission to use one of more of the notifications features.
You must call this method before registering a local notification or setting the ApplicationIconBadgeNumber.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Badge</name>
                <type>BOOL</type>
            </parameter>
            <parameter>
                <name>Sound</name>
                <type>BOOL</type>
            </parameter>
            <parameter>
                <name>Alert</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RegisterForRemoteNotifications">RegisterForRemoteNotifications</name>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="ClearLocalNotifications">ClearLocalNotifications</name>
            <comment>Clears all scheduled local notifications.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="GetScheduledNotifications">GetScheduledNotifications</name>
            <comment>Returns a list with the scheduled local notifications.</comment>
            <returntype>B4IList*</returntype>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>NetworkActivityIndicatorVisible</name>
            <comment>Gets or sets whether the network activity indicator (in the top bar) is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Is64BitProcess</name>
            <comment>Returns true if the current process is a 64 bit process.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>LaunchOptions</name>
            <comment>Returns a Map with data passed to the app during launch (if there is such data).</comment>
            <returntype>B4IMap*</returntype>
            <parameter>
                <name>p</name>
                <type>B4IMap*</type>
            </parameter>
        </property>
        <property>
            <name>IdleTimerDisabled</name>
            <comment>If true then the screen will not be locked automatically even if the user is not interacting with it,
as long as the application is in the foreground.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>iPadDevice</name>
            <comment>Returns true if the current device is an iPad device.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>OSVersion</name>
            <comment>Returns a string describing the current version.</comment>
            <returntype>NSString*</returntype>
        </property>
        <property>
            <name>KeyController</name>
            <comment>Gets or sets the root controller. You can use this property to switch to a different controller.</comment>
            <returntype>UIViewController*</returntype>
            <parameter>
                <name>p</name>
                <type>UIViewController*</type>
            </parameter>
        </property>
        <property>
            <name>ApplicationIconBadgeNumber</name>
            <comment>Gets or sets the app icon badge number. You need to call RegisterUserNotifications before setting this property.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>UIView</name>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <property>
            <name>Left</name>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>NSString</name>
        <method>
            <name DesignerName="Length">Length</name>
            <comment>Returns the string length.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="IndexOf">IndexOf:</name>
            <comment>Returns the index of the first occurrence of the specified string in this string.
Returns -1 if the string is not found.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>SearchFor</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="IndexOf2">IndexOf2::</name>
            <comment>Similar to IndexOf. Starts the search from Index.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>SearchFor</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LastIndexOf">LastIndexOf:</name>
            <comment>Returns the index of the first occurrence of the specified string in this string.
The search starts at the end of this string and advances to the beginning.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>SearchFor</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LastIndexOf2">LastIndexOf2::</name>
            <comment>Similar to LastIndexOf. The search starts at the given index.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>SearchFor</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Trim">Trim</name>
            <comment>Returns a copy of the original string without any leading or trailing white spaces.</comment>
            <returntype>NSString*</returntype>
        </method>
        <method>
            <name DesignerName="SubString">SubString:</name>
            <comment>Returns a new string which is a substring of the original string.
The new string will include the character at BeginIndex and will extend to the end of the string.
Example:&lt;code&gt;
"012345".SubString(2) 'Returns "2345"&lt;/code&gt;</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>BeginIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SubString2">SubString2::</name>
            <comment>Returns a new string which is a substring of the original string.
The new string will include the character at BeginIndex and will extend to the character as EndIndex (exclusive).
Example:&lt;code&gt;
"012345".SubString(2, 4) 'Returns "23"&lt;/code&gt;</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>BeginIndex</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>EndIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CompareTo">CompareTo:</name>
            <comment>Lexicographically compares the two strings.
Returns a value less than 0 if the current string precedes Other.
Returns 0 if both strings are equal.
Returns a value larger than 0 if the current string comes after Other.
Note that upper case characters precede lower case characters.
Examples:&lt;code&gt;
"abc".CompareTo("da")  ' &lt; 0
"abc".CompareTo("Abc") ' &gt; 0
"abc".CompareTo("abca")' &lt; 0&lt;/code&gt;</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Other</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="EqualsIgnoreCase">EqualsIgnoreCase:</name>
            <comment>Returns true if both strings are equal ignoring their case.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Other</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CharAt">CharAt:</name>
            <comment>Returns the character at the given index.</comment>
            <returntype>unichar</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="StartsWith">StartsWith:</name>
            <comment>Returns true if this string starts with the given Prefix.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Prefix</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="EndsWith">EndsWith:</name>
            <comment>Returns true if this string ends with the given Suffix.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Suffix</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Replace">Replace::</name>
            <comment>Returns a new string resulting from the replacement of all the occurrences of Target with Replacement.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Target</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Replacement</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ToLowerCase">ToLowerCase</name>
            <comment>Returns a new string which is the result of lower casing this string.</comment>
            <returntype>NSString*</returntype>
        </method>
        <method>
            <name DesignerName="Contains">Contains:</name>
            <comment>Tests whether the string contains the given string parameter.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>SearchFor</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ToUpperCase">ToUpperCase</name>
            <comment>Returns a new string which is the result of upper casing this string.</comment>
            <returntype>NSString*</returntype>
        </method>
        <method>
            <name DesignerName="GetBytes">GetBytes:</name>
            <comment>Encodes the string into a new array of bytes.
You can use ByteToString keyword to convert an array of bytes (encoded string) to a string.
Example:&lt;code&gt;
Dim Data() As Byte = "Some string".GetBytes("UTF8")&lt;/code&gt;</comment>
            <returntype>unsigned char[]</returntype>
            <parameter>
                <name>CharSet</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="MeasureWidth">MeasureWidth:</name>
            <comment>Returns the width of this string drawn with the given font.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>Font</name>
                <type>B4IFontWrapper*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="MeasureHeight">MeasureHeight:</name>
            <comment>Returns the height of this string drawn with the given font.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>Font</name>
                <type>B4IFontWrapper*</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>B4IBit</name>
        <comment>A predefined object containing bitwise related methods.</comment>
        <method>
            <name DesignerName="And">And::</name>
            <comment>Returns the bitwise AND of the two values.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>N2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Or">Or::</name>
            <comment>Returns the bitwise OR of the two values.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>N2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Xor">Xor::</name>
            <comment>Returns the bitwise XOR of the two values.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>N2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Not">Not:</name>
            <comment>Returns the bitwise complement of the given value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ShiftLeft">ShiftLeft::</name>
            <comment>Shifts N left.
Shift - Number of positions to shift.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shift</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ShiftRight">ShiftRight::</name>
            <comment>Shift N right.
Keeps the original value sign.
Shift - Number of positions to shift.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shift</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="UnsignedShiftRight">UnsignedShiftRight::</name>
            <comment>Shift N right.
Shifts zeroes in the leftmost positions.
Shift - Number of positions to shift.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shift</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ParseInt">ParseInt::</name>
            <comment>Parses Value as an integer using the specified radix.
Radix - Should be between 2 to 36.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Value</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Radix</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="InputStreamToBytes">InputStreamToBytes:</name>
            <comment>Reads the data from the input stream and writes it into an array of bytes.
The input stream is automatically closed at the end.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>In</name>
                <type>B4IInputStream*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="FMod">FMod::</name>
            <comment>Computes the floating point remainder of N1 / N2.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>N1</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>N2</name>
                <type>double</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>B4IFile</name>
        <comment>A predefined object containing files related methods. Note that iOS devices file system is case sensitive.
Note that each application can only access its own files. There is not any shared location (such as Android File.DirRootExternal).</comment>
        <method>
            <name DesignerName="Exists">Exists::</name>
            <comment>Checks whether the given file exists.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Delete">Delete::</name>
            <comment>Deletes the given file. Returns true if the file was deleted.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="MakeDir">MakeDir::</name>
            <comment>Creates a new folder under Parent folder/</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Parent</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="OpenInput">OpenInput::</name>
            <comment>Opens an InputStream to the given file.</comment>
            <returntype>B4IInputStream*</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="OpenOutput">OpenOutput:::</name>
            <comment>Opens an OutputStream to the given file.
Append - If true then new data will be appended to the existing data.</comment>
            <returntype>B4IOutputStream*</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Append</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Copy">Copy::::</name>
            <comment>Copies the source file to the target location.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DirSource</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileSource</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>DirTarget</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileTarget</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Copy2">Copy2::</name>
            <comment>Copies the input stream to the output stream. The input stream is closed at the end.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>In</name>
                <type>B4IInputStream*</type>
            </parameter>
            <parameter>
                <name>Out</name>
                <type>B4IOutputStream*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Combine">Combine::</name>
            <comment>Combines the Dir and FileName to a single string.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ListFiles">ListFiles:</name>
            <comment>Returns a List with the files under the specified directory.</comment>
            <returntype>B4IList*</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetExcludeFromBackup">SetExcludeFromBackup:::</name>
            <comment>Marks a file to be excluded from iTunes backup.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Value</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="IsDirectory">IsDirectory::</name>
            <comment>Tests whether the specified file is a directory.</comment>
            <returntype>bool</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetAttributes">GetAttributes::</name>
            <comment>(advanced) Returns a Map with the file attributes.</comment>
            <returntype>B4IMap*</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Size">Size::</name>
            <comment>Returns the file size.</comment>
            <returntype>long long</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LastModified">LastModified::</name>
            <returntype>long long</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ReadList">ReadList::</name>
            <comment>Reads the given text file and returns a list. Each line in the file is converted to a list item.</comment>
            <returntype>B4IList*</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ReadString">ReadString::</name>
            <comment>Reads the text file with UTF8 encoding.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ReadString2">ReadString2:::</name>
            <comment>Reads the text file with the given encoding.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>CharSet</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteString2">WriteString2::::</name>
            <comment>Writes the string to a file with the specified encoding.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>CharSet</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteString">WriteString:::</name>
            <comment>Writes the string to a file with UTF8 encoding.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteList">WriteList:::</name>
            <comment>Writes a list of strings or numbers to a text file. Each item is written as a single line.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>List</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteMap">WriteMap:::</name>
            <comment>Writes a Map of strings or numbers to a text file.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Map</name>
                <type>B4IMap*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ReadMap">ReadMap::</name>
            <comment>Reads a Map written with File.WriteMap.</comment>
            <returntype>B4IMap*</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>DirAssets</name>
            <comment>Returns a reference to the files added to the Files tab. These files are read-only.</comment>
            <returntype>NSString*</returntype>
        </property>
        <property>
            <name>DirLibrary</name>
            <comment>The place for any non-user generated persistent files. This folder is backed up by iTunes automatically.
You can create a subfolder named Caches. Files under that folder will not be backed up.</comment>
            <returntype>NSString*</returntype>
        </property>
        <property>
            <name>DirDocuments</name>
            <comment>The documents folder should only be used to store user generated content. It is possible to make this folder sharable through iTunes.
This folder is backed up by iTunes automatically.</comment>
            <returntype>NSString*</returntype>
        </property>
        <property>
            <name>DirTemp</name>
            <comment>A temporary folder. Files in this folder are not backed up by iTunes and may be deleted from time to time.</comment>
            <returntype>NSString*</returntype>
        </property>
    </class>
    <class>
        <name>B4IInputStream</name>
        <shortname>InputStream</shortname>
        <objectwrapper>NSInputStream*</objectwrapper>
        <comment>A stream that you can read from. Use File.OpenInput to get a file input stream.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Close">Close</name>
            <comment>Closes the input stream.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="ReadBytes">ReadBytes:::</name>
            <comment>Reads bytes to the stream and writes them to the buffer. Returns the number of bytes read.
Buffer - Data will be written to this buffer.
StartOffset - The first byte will be written at this offset.
MaxCount - Maximum number of bytes to read.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Buffer</name>
                <type>unsigned char[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>MaxCount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="InitializeFromBytesArray">InitializeFromBytesArray:::</name>
            <comment>Initializes an InputStream that reads from a bytes array.
Buffer - The bytes array.
StartOffset - First byte will be read from this offset.
Length - Number of bytes to expose to the stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Buffer</name>
                <type>unsigned char[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IOutputStream</name>
        <shortname>OutputStream</shortname>
        <objectwrapper>NSOutputStream*</objectwrapper>
        <comment>A stream that is used to write data to.
You can open a file output stream with File.OpenOutput.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="InitializeToBytesArray">InitializeToBytesArray:</name>
            <comment>Creates a memory stream. Call ToBytesArray to convert the written data to an array of bytes.
StartSize - Currently not used.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>StartSize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ToBytesArray">ToBytesArray</name>
            <comment>Converts a memory stream to an array of bytes.</comment>
            <returntype>unsigned char[]</returntype>
        </method>
        <method>
            <name DesignerName="Close">Close</name>
            <comment>Closes the output stream.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="WriteBytes">WriteBytes:::</name>
            <comment>Writes the given bytes to the stream.
Buffer - Data to write.
StartOffset - Offset of first byte.
Length - Number of bytes to write.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Buffer</name>
                <type>unsigned char[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IMap</name>
        <shortname>Map</shortname>
        <comment>A collection that holds pairs of keys and values. The keys are unique. Fetching items is done based on the key.
Unlike B4J / B4A Maps, B4i Map does not retain the original order of items. You can iterate over the keys or values with the Keys or Values properties.</comment>
        <method>
            <name DesignerName="ToDictionary">ToDictionary</name>
            <comment>Converts a Map to NSDictionary. This can be useful for interaction with native API.</comment>
            <returntype>NSDictionary*</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize</name>
            <comment>Initializes the Map.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Put">Put::</name>
            <comment>Puts the given key / value in the map. If there is already an entry with the same key then the previous entry will be removed.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Key</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>Value</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Remove">Remove:</name>
            <comment>Removes the pair with the given key (if such exists).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Key</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Get">Get:</name>
            <comment>Returns the value tied to this key. Returns Null if no such key exists.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>Key</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetDefault">GetDefault::</name>
            <comment>Returns the value tied to this key. Returns the Default parameter if no such key exists.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>Key</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>Default</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Clear">Clear</name>
            <comment>Removes all items from the Map.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="ContainsKey">ContainsKey:</name>
            <comment>Returns true if there is an entry with the specified key.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Key</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Keys">Keys</name>
            <comment>Can be used to iterate over the keys.
Example:&lt;code&gt;
For Each key As String In Map1.Keys
  Log("Value = " &amp; Map1.Get(key))
Next&lt;/code&gt;</comment>
            <returntype>NSObject &lt;B4IIterable&gt;*</returntype>
        </method>
        <method>
            <name DesignerName="Values">Values</name>
            <comment>Can be used to iterate over the values.</comment>
            <returntype>NSObject &lt;B4IIterable&gt;*</returntype>
        </method>
        <property>
            <name>Size</name>
            <comment>Returns the number of elements in the collection.</comment>
            <returntype>int</returntype>
        </property>
        <property>
            <name>IsInitialized</name>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>IsReadOnly</name>
            <comment>In some cases libraries can return read only Maps. This property will return true for such maps.</comment>
            <returntype>BOOL</returntype>
        </property>
    </class>
    <class>
        <name>B4INativeObject</name>
        <shortname>NativeObject</shortname>
        <objectwrapper>NSObject*</objectwrapper>
        <comment>NativeObject is similar to B4A/B4J JavaObject. It allows you to call native methods and get or set fields.
Note that only Objective C APIs can be used. C APIs cannot be called dynamically.</comment>
        <event>Event (Args() As Object) As Object</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize:</name>
            <comment>Initializes a new object and sets it to reference the given class.</comment>
            <returntype>B4INativeObject*</returntype>
            <parameter>
                <name>ClassName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RunMethod">RunMethod::</name>
            <comment>Runs the given method. Params can be Null if there are no parameters.
Note that a method name is the full name with the colons.</comment>
            <returntype>B4INativeObject*</returntype>
            <parameter>
                <name>MethodName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Params</name>
                <type>NSObject[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RunMethodWithBlocks" RaisesSynchronousEvents="true">RunMethodWithBlocks::</name>
            <comment>Similar to RunMethod. Runs a method that expects a block.</comment>
            <returntype>B4INativeObject*</returntype>
            <parameter>
                <name>MethodName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Params</name>
                <type>NSObject[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetField">GetField:</name>
            <comment>Gets the value of the given property or field.</comment>
            <returntype>B4INativeObject*</returntype>
            <parameter>
                <name>Field</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetField">SetField::</name>
            <comment>Sets the value of the given property or field.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>FieldName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Value</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="UIColorToColor">UIColorToColor:</name>
            <comment>Converts a UIColor to B4i color value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>UIColor</name>
                <type>UIColor*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ColorToUIColor">ColorToUIColor:</name>
            <comment>Converts B4i color value to UIColor.</comment>
            <returntype>UIColor*</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="MakeRange">MakeRange::</name>
            <comment>Creates a NSRange struct.</comment>
            <returntype>NSData*</returntype>
            <parameter>
                <name>StartLocation</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="MakeRect">MakeRect::::</name>
            <comment>Creates a CGRect struct.</comment>
            <returntype>NSData*</returntype>
            <parameter>
                <name>X</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="MakePoint">MakePoint::</name>
            <comment>Creates a CGPoint struct.</comment>
            <returntype>NSData*</returntype>
            <parameter>
                <name>X</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="MakeSize">MakeSize::</name>
            <comment>Creates a CGSize struct.</comment>
            <returntype>NSData*</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="NSDataToArray">NSDataToArray:</name>
            <comment>Converts an NSData object to an array of bytes.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Data</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ArrayToNSData">ArrayToNSData:</name>
            <comment>Converts an array of bytes to NSData object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>Arr</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="AsBoolean">AsBoolean</name>
            <comment>Returns the wrapped object as a Boolean value.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="AsString">AsString</name>
            <comment>Returns the wrapped object as a String value.</comment>
            <returntype>NSString*</returntype>
        </method>
        <method>
            <name DesignerName="AsNumber">AsNumber</name>
            <comment>Returns the wrapped object as a numeric value.</comment>
            <returntype>NSObject*</returntype>
        </method>
        <method>
            <name DesignerName="CreateBlock">CreateBlock::::</name>
            <comment>Creates a block that raises the given sub.
SubName - The event prefix. The sub signature should be: SubName_Event (Args() As Object) As Object.
NumberOfParameters - The number of parameters passed to the block. Should be between 0 to 2.
Delayed - Whether the event is raised immediately or it is sent to the message queue.</comment>
            <returntype>id</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>SubName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>NumberOfParameters</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Delayed</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4ITimer</name>
        <shortname>Timer</shortname>
        <comment>A timer raises the Tick event after each interval.
The event is raised on the main thread.</comment>
        <event>Tick</event>
        <method>
            <name DesignerName="Initialize">Initialize:::</name>
            <comment>Initializes the timer and set the sub that will handle the tick event.
The timer is disabled until the Enabled property is set to true.
Interval - Timer interval in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>BI</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Interval</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether the object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <property>
            <name>Interval</name>
            <comment>Gets or sets the interval, measured in milliseconds.</comment>
            <returntype>long long</returntype>
            <parameter>
                <name>p</name>
                <type>long long</type>
            </parameter>
        </property>
        <property>
            <name>Enabled</name>
            <comment>Gets or sets whether the timer is enabled. New timers are not enabled.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IBitmap</name>
        <shortname>Bitmap</shortname>
        <objectwrapper>UIImage*</objectwrapper>
        <comment>An object that holds an image. You can use ImageView to show an image.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <comment>Loads the specified image. If the image name ends with @2x (without the extension) then the image scale is considered to be 2.
If you load an image named image1.png. And in the same folder there is also an image named image1@2x.png then on a high resolution device
image1@2x.png will be loaded and the image scale will be set to 2.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize2">Initialize2:</name>
            <comment>Reads a bitmap from the input stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>InputStream</name>
                <type>B4IInputStream*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteToStream">WriteToStream:::</name>
            <comment>Writes the image to the output stream.
Quality - Value between 0 (smaller size, lower quality) to 100 (larger size, higher quality).
Format - JPEG or PNG.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>OutputStream</name>
                <type>B4IOutputStream*</type>
            </parameter>
            <parameter>
                <name>Quality</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Format</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Returns the bitmap width.</comment>
            <returntype>float</returntype>
        </property>
        <property>
            <name>Height</name>
            <comment>Returns the bitmap height.</comment>
            <returntype>float</returntype>
        </property>
    </class>
    <class>
        <name>B4IImageViewWrapper</name>
        <shortname>ImageView</shortname>
        <objectwrapper>UIImageView*</objectwrapper>
        <comment>A view that shows a bitmap.</comment>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>MODE_FILL</name>
            <comment>The bitmap will be stretched to fill the view.</comment>
            <returntype>UIViewContentMode</returntype>
        </property>
        <property>
            <name>MODE_FIT</name>
            <comment>The bitmap will be resized to fill the view. The original aspect ratio will be kept.</comment>
            <returntype>UIViewContentMode</returntype>
        </property>
        <property>
            <name>MODE_TOPLEFT</name>
            <comment>The bitmap will not be resized.</comment>
            <returntype>UIViewContentMode</returntype>
        </property>
        <property>
            <name>MODE_CENTER</name>
            <comment>The bitmap will be centered.</comment>
            <returntype>UIViewContentMode</returntype>
        </property>
        <property>
            <name>ContentMode</name>
            <comment>Gets or sets the content mode (one of the MODE constants).</comment>
            <returntype>UIViewContentMode</returntype>
            <parameter>
                <name>p</name>
                <type>UIViewContentMode</type>
            </parameter>
        </property>
        <property>
            <name>Bitmap</name>
            <comment>Gets or sets the bitmap.</comment>
            <returntype>B4IBitmap*</returntype>
            <parameter>
                <name>p</name>
                <type>B4IBitmap*</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IMediaPlayer</name>
        <shortname>MediaPlayer</shortname>
        <objectwrapper>AVAudioPlayer*</objectwrapper>
        <comment>MediaPlayer allows you to play audio files.
Note that in case of an interruption (phone call for example) the playback will be paused automatically.
You should handle the EndInterruption event and call MediaPlayer.Play to resume playback.</comment>
        <event>Complete</event>
        <event>EndInterruption</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::::</name>
            <comment>Initializes the MediaPlayer and loads the specified file.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Play">Play</name>
            <comment>Starts or resumes the playback.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Pause">Pause</name>
            <comment>Pauses the playback.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Stop">Stop</name>
            <comment>Stops the playback. You should initialize MediaPlayer to play another sound.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Duration</name>
            <comment>Returns the loaded sound total duration in milliseconds;</comment>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Position</name>
            <comment>Gets or sets the playback position (in milliseconds).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Looping</name>
            <comment>Set to True to automatically restart the playback.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Volume</name>
            <comment>Gets or sets the playback volume (value between 0 to 1).</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IRect</name>
        <shortname>Rect</shortname>
        <comment>An object that represents a rectangle. Mainly used with Canvas.</comment>
        <method>
            <name DesignerName="Initialize">Initialize::::</name>
            <comment>Initializes a new Rect and sets its dimensions.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Width">Width</name>
            <returntype>float</returntype>
        </method>
        <method>
            <name DesignerName="Height">Height</name>
            <returntype>float</returntype>
        </method>
        <method>
            <name DesignerName="ToCGRect">ToCGRect</name>
            <returntype>CGRect</returntype>
        </method>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <returntype>BOOL</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Right</name>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Bottom</name>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>CenterX</name>
            <comment>Returns the horizontal center.</comment>
            <returntype>float</returntype>
        </property>
        <property>
            <name>CenterY</name>
            <comment>Returns the vertical center.</comment>
            <returntype>float</returntype>
        </property>
    </class>
    <class>
        <name>B4IPathWrapper</name>
        <shortname>Path</shortname>
        <objectwrapper>UIBezierPath*</objectwrapper>
        <comment>Path is used together with Canvas to allow the drawing to be clipped to a polygon.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <comment>Initializes the Path and sets the initial position.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="InitializeRect">InitializeRect::</name>
            <comment>Initializes a path based on the given rectangle.
CornerRadius - Corners radius for rounded rectangles.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect1</name>
                <type>B4IRect*</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LineTo">LineTo::</name>
            <comment>Adds a line from the current point to the specified point.</comment>
            <returntype>B4IPathWrapper*</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4IPDFDocument</name>
        <shortname>PDFDocument</shortname>
        <comment>PDFDocument allows you to read existing PDF files and draw them with Canvas.DrawPDF.</comment>
        <method>
            <name DesignerName="Unlock">Unlock:</name>
            <returntype>void</returntype>
            <parameter>
                <name>Password</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <comment>Loads the given PDF document.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Release">Release</name>
            <comment>Releases resources related to the PDF document.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>NumberOfPages</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Locked</name>
            <returntype>BOOL</returntype>
        </property>
    </class>
    <class>
        <name>B4ICanvas</name>
        <shortname>Canvas</shortname>
        <comment>Canvas is used for drawing over other views.
The drawings will only be updated after a call to Canvas.Refresh. Note that you should call Canvas.Release when it is no longer used.
If the hosting is resized then the canvas should be released and initialized again.</comment>
        <method>
            <name DesignerName="Initialize">Initialize:</name>
            <comment>Initializes the canvas with the view that it will draw on.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>View</name>
                <type>B4IViewWrapper*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="InitializePDF">InitializePDF::::</name>
            <comment>Initializes a canvas that will create a PDF document. The default size of PDF documents is 612 x 792.
Dir / FileName - PDF file to create.
Width - Document width.
Height Document height;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="NextPDFPage">NextPDFPage</name>
            <comment>Moves the canvas to the next page. Should only be used when the canvas was initialized with InitializePDF.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="DrawBitmap">DrawBitmap::</name>
            <comment>Draws the specified bitmap in the DestRect rectangle.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>B4IBitmap*</type>
            </parameter>
            <parameter>
                <name>DestRect</name>
                <type>B4IRect*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawPDF">DrawPDF:::</name>
            <comment>Draws a PDF page in the DestRect rectangle.
Document - PDF Document.
PageNumber - The page to draw. Note that the first page number is 1.
DestRect - Destination rectangle.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Document</name>
                <type>B4IPDFDocument*</type>
            </parameter>
            <parameter>
                <name>PageNumber</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DestRect</name>
                <type>B4IRect*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawBitmapRotated">DrawBitmapRotated:::</name>
            <comment>Similar to DrawBitmap. Draws a rotated bitmap.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>B4IBitmap*</type>
            </parameter>
            <parameter>
                <name>DestRect</name>
                <type>B4IRect*</type>
            </parameter>
            <parameter>
                <name>Degrees</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="TileBitmap">TileBitmap::</name>
            <comment>Tiles the given bitmap in the DestRect rectangle. Note that the bitmap will be drawn upside down.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>B4IBitmap*</type>
            </parameter>
            <parameter>
                <name>DestRect</name>
                <type>B4IRect*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawView">DrawView::</name>
            <comment>Draws the given view in the DestRect rectangle.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>View</name>
                <type>UIView*</type>
            </parameter>
            <parameter>
                <name>DestRect</name>
                <type>B4IRect*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawColor">DrawColor:</name>
            <comment>Fills the entire canvas with the given color. Note that you can use ClipPath to clip the drawings to a specific region.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawRect">DrawRect::::</name>
            <comment>Draws a rectangle.
Rect1 - Rectangle coordinates.
Color - Drawing color.
Filled - Whether to fill the rectangle interior.
StrokeWidth - The rectangle border width.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect1</name>
                <type>B4IRect*</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Filled</name>
                <type>BOOL</type>
            </parameter>
            <parameter>
                <name>StrokeWidth</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawRectRotated">DrawRectRotated::::::</name>
            <comment>Similar to DrawRectRounded. Rotates the rectangle before it is drawn.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect1</name>
                <type>B4IRect*</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Filled</name>
                <type>BOOL</type>
            </parameter>
            <parameter>
                <name>StrokeWidth</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>CornersRadius</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Degrees</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawRectRounded">DrawRectRounded:::::</name>
            <comment>Similar to DrawRect. Allows you to draw a rectangle with rounded corners.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect1</name>
                <type>B4IRect*</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Filled</name>
                <type>BOOL</type>
            </parameter>
            <parameter>
                <name>StrokeWidth</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>CornersRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawCircle">DrawCircle::::::</name>
            <comment>Draws a circle.
x / y - Circle center.
Radius - Circle radius.
Color - Drawing color.
Filled - Whether to fill the circle interior.
StrokeWidth - The circle border width.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Radius</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Filled</name>
                <type>BOOL</type>
            </parameter>
            <parameter>
                <name>StrokeWidth</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="FillGradient">FillGradient:::::</name>
            <comment>Paints a gradient fill along the two points.
x1, y1 - Starting point.
x2, y2 - End point.
Colors - A list (or array) with the gradient colors.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Colors</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ClipPath">ClipPath:</name>
            <comment>Clips the drawing to the specified path. Call RemoveClip to remove the clip.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Path</name>
                <type>B4IPathWrapper*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RemoveClip">RemoveClip</name>
            <comment>Removes the last clipping set with ClipPath.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="DrawPath">DrawPath::::</name>
            <comment>Draws or fills the given path.
Path - The Path that will be filled or drawn.
Colors - Drawing color.
Filled - Whether to fill the path.
StrokeWidth - The border drawing width.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Path</name>
                <type>UIBezierPath*</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Filled</name>
                <type>BOOL</type>
            </parameter>
            <parameter>
                <name>StrokeWidth</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawLine">DrawLine::::::</name>
            <comment>Draws a line between two points.
x1, y1 - Starting point.
x2, y2 - End point.
Color - Drawing color.
StrokeWidth - Line width.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>StrokeWidth</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawTextRotated">DrawTextRotated:::::::</name>
            <comment>Similar to DrawText. Draws rotated text.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Font</name>
                <type>B4IFontWrapper*</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Align</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Degrees</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DrawText">DrawText::::::</name>
            <comment>Draws the given text.
Text - Text to draw.
x, y - Origin point.
Font - Font to use for drawing.
Color - Drawing color.
Align - Text alignment related to the origin point. One of the following values: LEFT, CENTER or RIGHT.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Font</name>
                <type>B4IFontWrapper*</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Align</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Refresh">Refresh</name>
            <comment>Applies the changes done. You must call Refresh for the drawings to be applied.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="CreateBitmap">CreateBitmap</name>
            <comment>Creates a new Bitmap from the canvas layer.</comment>
            <returntype>B4IBitmap*</returntype>
        </method>
        <method>
            <name DesignerName="Release">Release</name>
            <comment>Releases the canvas resources. You can safely call this method multiple times or before the canvas was initialized.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>View</name>
            <comment>Gets the attached view.</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>TargetRect</name>
            <comment>Returns the canvas drawing rectangle;</comment>
            <returntype>B4IRect*</returntype>
        </property>
    </class>
    <class>
        <name>B4IPanelWrapper</name>
        <shortname>Panel</shortname>
        <objectwrapper>B4IPanelView*</objectwrapper>
        <comment>Panel is a view that holds other views.</comment>
        <event>Touch(Action As Int, X As Float, Y As Float)</event>
        <event>Resize (Width As Float, Height As Float)</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DumpingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DumpingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="AddView">AddView:::::</name>
            <comment>Adds a view to the Panel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>View</name>
                <type>UIView*</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LoadLayout" RaisesSynchronousEvents="true">LoadLayout::</name>
            <comment>Loads a layout file to the panel.</comment>
            <returntype>B4ILayoutValues*</returntype>
            <parameter>
                <name>LayoutFile</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RemoveAllViews">RemoveAllViews</name>
            <comment>Removes all views from the panel.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewAt">RemoveViewAt:</name>
            <comment>Removes the view at the specified index.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetView">GetView:</name>
            <comment>Gets the view at the specified index.</comment>
            <returntype>B4IViewWrapper*</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetAllViewsRecursive">GetAllViewsRecursive</name>
            <comment>Used with a For Each block to iterate over all views recursively.</comment>
            <returntype>NSObject &lt;B4IIterable&gt;*</returntype>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>ACTION_DOWN</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ACTION_UP</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ACTION_MOVE</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>NumberOfViews</name>
            <returntype>int</returntype>
        </property>
    </class>
    <class>
        <name>B4ILayoutValues</name>
        <shortname>LayoutValues</shortname>
        <property>
            <name>Scale</name>
            <comment>Returns 1 as this is the scale is normalized automatically by the OS.</comment>
            <returntype>float</returntype>
        </property>
        <property>
            <name>Width</name>
            <comment>Returns the (normalized) width.</comment>
            <returntype>int</returntype>
        </property>
        <property>
            <name>Height</name>
            <comment>Returns the (normalized) height.</comment>
            <returntype>int</returntype>
        </property>
        <property>
            <name>DeviceApproximateScreenSize</name>
            <comment>Returns the device approximate screen size measured in inches.</comment>
            <returntype>double</returntype>
        </property>
        <property>
            <name>NonnormalizedScale</name>
            <comment>Returns the non-normalized scale.</comment>
            <returntype>float</returntype>
        </property>
    </class>
    <class>
        <name>B4INotificationWrapper</name>
        <shortname>Notification</shortname>
        <objectwrapper>UILocalNotification*</objectwrapper>
        <comment>Notification object allows you to schedule local notifications.
You need to call App.RegisterUserNotifications before you create a local notification.</comment>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize:</name>
            <comment>Initializes the notification and sets the fire date.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>FireDate</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Register">Register</name>
            <comment>Schedules the notification.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Cancel">Cancel</name>
            <comment>Cancel a scheduled notification.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>AlertBody</name>
            <comment>Gets or sets the notification message.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>p</name>
                <type>NSString*</type>
            </parameter>
        </property>
        <property>
            <name>IconBadgeNumber</name>
            <comment>Gets or sets the app icon badge number.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>PlaySound</name>
            <comment>Gets or sets whether the notification will play a sound.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>NotificationTag</name>
            <comment>Gets or sets the tag string that will be tied to this notification.
This value will be available when the user clicks on the notification.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>p</name>
                <type>NSString*</type>
            </parameter>
        </property>
    </class>
    <version>2.52</version>
    <dependsOn>AVFoundation.framework</dependsOn>
</root>
