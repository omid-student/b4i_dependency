<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4IAdView</name>
        <shortname>AdView</shortname>
        <objectwrapper>GADBannerView*</objectwrapper>
        <event>ReceiveAd</event>
        <event>FailedToReceiveAd (ErrorCode As String)</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="CalcRelativeKeyboardHeight">CalcRelativeKeyboardHeight:</name>
            <comment>Calculates the keyboard top point relative to the current view.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>KeyboardHeight</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetColorAnimated">SetColorAnimated::</name>
            <comment>Animates the view's background color.
DurationMS - Animation duration measured in milliseconds.
BackgroundColor - The new background color.
Note that Labels do not support this type of animation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetAlphaAnimated">SetAlphaAnimated::</name>
            <comment>Animates the view's alpha level.
DurationMS - Animation duration measured in milliseconds.
Alpha - The new alpha level (0 - transparent, 1 - fully opaque).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetLayoutAnimated">SetLayoutAnimated::::::</name>
            <comment>Animates the view's layout.
DurationMS - Animation duration measured in milliseconds. Set to 0 to change the layout immediately.
DampingRatio - If smaller than 1 then a spring effect will be applied to the animation. The minimum value should be 0.1.
Set to 1 for no spring effect.
Left, Top, Width and Height - The new layout.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DurationMS</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DampingRatio</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBorder">SetBorder:::</name>
            <comment>Sets the view's border width, color and corner radius.
Note that the corner radius should be 0 if the view should show a shadow as well.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetShadow">SetShadow:::::</name>
            <comment>Adds a shadow to to the view. The border corners radius should be set to 0 when adding shadows.
Colors - The shadow color.
OffsetX, OffsetY - The horizontal and vertical offsets.
Opacity - Sets the shadow opacity: 0 - transparent, 1 - opaque.
StaticRect - (optimization parameter) Set this parameter to True if the view's size is constant.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>OffsetX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>OffsetY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Opacity</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>StaticRect</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SizeToFit">SizeToFit</name>
            <comment>Resizes the view to make it fit its content.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="RequestFocus">RequestFocus</name>
            <comment>Tries to set the focus on the current view. Returns True if the focus was set. Most views are not focusable.
When a text view is focused the keyboard is shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="ResignFocus">ResignFocus</name>
            <comment>Removes the focus from the current view. Removing the focus from a text view will hide the keyboard.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="RemoveViewFromParent">RemoveViewFromParent</name>
            <comment>Removes the view from its parent (same as B4A View.RemoveView method).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="BringToFront">BringToFront</name>
            <comment>Brings the view to front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SendToBack">SendToBack</name>
            <comment>Sends the view to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetParallaxEffect">SetParallaxEffect::</name>
            <comment>Adds a parallax effect to the view. The view will slightly move when the device is tilted.
Vertical - Vertical offset. Can be a positive or negative value.
Horizontal - Horizontal offset. Can be a positive or negative value.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Vertical</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Horizontal</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize:::::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>AdUnit</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Parent</name>
                <type>B4IPage*</type>
            </parameter>
            <parameter>
                <name>AdSize</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LoadAd">LoadAd</name>
            <comment>Requests an ad from AdMob.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetTestDevices">SetTestDevices:</name>
            <comment>Sets the test devices. Check the logs for the current device id.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DeviceIds</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LoadAdWithBuilder">LoadAdWithBuilder:</name>
            <comment>Requests an ad configured with AdRequestBuilder. Note that test devices should be set in the builder.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Builder</name>
                <type>B4IAdRequestBuilder*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Left</name>
            <comment>Gets or sets the view's left position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Top</name>
            <comment>Gets or sets the view's top position.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Width</name>
            <comment>Gets or sets the view's width.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Height</name>
            <comment>Gets or sets the view's height.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>Color</name>
            <comment>Gets or sets the view's background color.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Alpha</name>
            <comment>Gets or sets the view's alpha level. 0 - transparent, 1 (default) - fully opaque.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>p</name>
                <type>float</type>
            </parameter>
        </property>
        <property>
            <name>TintColor</name>
            <comment>Gets or sets the view's tint color. Some views use this color to change their appearance.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>Visible</name>
            <comment>Gets or sets whether the view is visible.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>IsFocused</name>
            <comment>Returns true if the view is focused.</comment>
            <returntype>BOOL</returntype>
        </property>
        <property>
            <name>UserInteractionEnabled</name>
            <comment>Gets or sets whether the user can interact with this view. True by default.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
        <property>
            <name>Parent</name>
            <comment>Returns the views parent. The returned view can be uninitialized (if there is no parent).</comment>
            <returntype>B4IViewWrapper*</returntype>
        </property>
        <property>
            <name>SIZE_BANNER</name>
            <comment>iPhone ad size (320x50)</comment>
            <returntype>NSObject*</returntype>
        </property>
        <property>
            <name>SIZE_LARGE_BANNER</name>
            <comment>Taller version of the standard banner (320x100)</comment>
            <returntype>NSObject*</returntype>
        </property>
        <property>
            <name>SIZE_FULL_BANNER</name>
            <comment>iPad ad size (468x60)</comment>
            <returntype>NSObject*</returntype>
        </property>
        <property>
            <name>SIZE_LEADERBOARD</name>
            <comment>iPad ad size (728x90)</comment>
            <returntype>NSObject*</returntype>
        </property>
        <property>
            <name>SIZE_SMART_BANNER_PORTRAIT</name>
            <returntype>NSObject*</returntype>
        </property>
        <property>
            <name>SIZE_SMART_BANNER_LANDSCAPE</name>
            <returntype>NSObject*</returntype>
        </property>
    </class>
    <class>
        <name>B4IAdInterstitial</name>
        <shortname>InterstitialAd</shortname>
        <comment>This object allows you to show interstitial ads (full screen ads).
You need to request an ad by calling RequestAd and then wait for the Ready event.
If the Success parameter is true then you can call Show to show the full screen ad.
Note that you can show it whenever you like.</comment>
        <event>Ready (Success As Boolean)</event>
        <method>
            <name DesignerName="Initialize">Initialize:::</name>
            <comment>Initializes the interstitial ad manager.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>AdUnit</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetTestDevices">SetTestDevices:</name>
            <comment>Sets the test devices. You can see the device id in the logs.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DeviceIds</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RequestAd">RequestAd</name>
            <comment>Requests an interstitial ad. The Ready event will later be raised.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="LoadAdWithBuilder">LoadAdWithBuilder:</name>
            <comment>Requests an ad configured with AdRequestBuilder. Note that test devices should be set in the builder.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Builder</name>
                <type>B4IAdRequestBuilder*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="IsReady">IsReady</name>
            <comment>Returns true if there is an interstitial ad ready to be shown.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Show">Show:</name>
            <comment>Shows the ad.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Parent</name>
                <type>B4IPage*</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>B4IRewardedVideoAd</name>
        <shortname>RewardedVideoAd</shortname>
        <objectwrapper>GADRewardBasedVideoAd*</objectwrapper>
        <comment>A video ad where the user is rewarded if it is fully watched. The Rewarded event will be raised in that case.
Note that AdMob does not server these ads directly. You need to use the mediation feature to add an ad network that supports this type of ads.</comment>
        <event>ReceiveAd</event>
        <event>FailedToReceiveAd (ErrorCode As String)</event>
        <event>AdClosed</event>
        <event>AdOpened</event>
        <event>AdLeftApplication</event>
        <event>Rewarded (Item As Object)</event>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LoadAd">LoadAd:</name>
            <comment>Sends a request for an ad. The ReceiveAd event will be raised when an ad is available.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>AdUnitId</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LoadAdWithBuilder">LoadAdWithBuilder::</name>
            <comment>Requests an ad configured with AdRequestBuilder. Note that test devices should be set in the builder.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>AdUnitId</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Builder</name>
                <type>B4IAdRequestBuilder*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Show">Show:</name>
            <comment>Shows the video ad.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Parent</name>
                <type>B4IPage*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
        <property>
            <name>Ready</name>
            <comment>Returns True if there is an ad ready to be displayed.</comment>
            <returntype>BOOL</returntype>
        </property>
    </class>
    <class>
        <name>B4IConsentManager</name>
        <shortname>ConsentManager</shortname>
        <event>InfoUpdated (Success As Boolean)</event>
        <event>FormResult (Success As Boolean, UserPrefersAdFreeOption As Boolean)</event>
        <method>
            <name DesignerName="Initialize">Initialize::</name>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="RequestInfoUpdate">RequestInfoUpdate:</name>
            <comment>Requests the current consent state. Raises the InfoUpdated event.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>PublishersIds</name>
                <type>B4IList*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LogDeviceIdForDebugging">LogDeviceIdForDebugging</name>
            <comment>Logs the device id that can be used to set the debug geographic location.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="AddTestDevice">AddTestDevice:</name>
            <comment>Adds a test device. Call LogDeviceIdForDebugging to get the device id.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DeviceId</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetDebugGeography">SetDebugGeography:</name>
            <comment>Set the geographic location of the test devices.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>InEea</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ShowConsentForm">ShowConsentForm::::::</name>
            <comment>Shows the consent form.
Page - The container page.
PrivacyURL - Link to your privacy policy.
PersonalizedOption - Whether to show the personalized ads option.
NonPersonalizedOption - Whether to show the non-personalized ads option.
AdFreeOption - Whether to show the ads free option.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>Page</name>
                <type>B4IPage*</type>
            </parameter>
            <parameter>
                <name>PrivacyURL</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>PersonalizedOption</name>
                <type>BOOL</type>
            </parameter>
            <parameter>
                <name>NonPersonalizedOption</name>
                <type>BOOL</type>
            </parameter>
            <parameter>
                <name>AdFreeOption</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <property>
            <name>STATE_PERSONALIZED</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>STATE_NON_PERSONALIZED</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>STATE_UNKNOWN</name>
            <returntype>int</returntype>
        </property>
        <property>
            <name>ConsentState</name>
            <returntype>int</returntype>
            <parameter>
                <name>p</name>
                <type>int</type>
            </parameter>
        </property>
        <property>
            <name>IsRequestLocationInEeaOrUnknown</name>
            <returntype>BOOL</returntype>
        </property>
    </class>
    <class>
        <name>B4IAdRequestBuilder</name>
        <shortname>AdRequestBuilder</shortname>
        <objectwrapper>GADRequest*</objectwrapper>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <comment>Tests whether this object was initialized.</comment>
            <returntype>BOOL</returntype>
        </method>
        <method>
            <name DesignerName="Initialize">Initialize</name>
            <returntype>B4IAdRequestBuilder*</returntype>
        </method>
        <method>
            <name DesignerName="AddTestDevice">AddTestDevice:</name>
            <comment>Don't use. Does not do anything.</comment>
            <returntype>B4IAdRequestBuilder*</returntype>
            <parameter>
                <name>DeviceId</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="NonPersonalizedAds">NonPersonalizedAds</name>
            <comment>Requests non-personalized ads.</comment>
            <returntype>B4IAdRequestBuilder*</returntype>
        </method>
        <property>
            <name>Tag</name>
            <comment>Gets or sets the Tag object. This is a placeholder for any object you like to tie to this object.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
    </class>
    <version>1.7</version>
    <dependsOn>AVFoundation.framework</dependsOn>
    <dependsOn>AudioToolbox.framework</dependsOn>
    <dependsOn>AdSupport.framework</dependsOn>
    <dependsOn>CoreGraphics.framework</dependsOn>
    <dependsOn>CoreTelephony.framework</dependsOn>
    <dependsOn>EventKit.framework</dependsOn>
    <dependsOn>EventKitUI.framework</dependsOn>
    <dependsOn>MessageUI.framework</dependsOn>
    <dependsOn>StoreKit.framework</dependsOn>
    <dependsOn>SystemConfiguration.framework</dependsOn>
    <dependsOn>CoreMedia.framework</dependsOn>
    <dependsOn>GoogleMobileAds.framework.3</dependsOn>
    <dependsOn>MediaPlayer.framework</dependsOn>
    <dependsOn>SafariServices.framework</dependsOn>
    <dependsOn>CoreBluetooth.framework</dependsOn>
    <dependsOn>MobileCoreServices.framework</dependsOn>
</root>
