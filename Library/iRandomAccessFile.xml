<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>B4IRandomAccessFile</name>
        <shortname>RandomAccessFile</shortname>
        <method>
            <name DesignerName="Initialize">Initialize:::</name>
            <comment>Opens the specified file in big endian mode.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>ReadOnly</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize2">Initialize2::::</name>
            <comment>Opens the specified file with the specified endianess mode.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>ReadOnly</name>
                <type>BOOL</type>
            </parameter>
            <parameter>
                <name>LittleEndian</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Initialize3">Initialize3::</name>
            <comment>Treats the array of bytes as a random access file with a constant size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Buffer</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>LittleEndian</name>
                <type>BOOL</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Close">Close</name>
            <comment>Closes the file.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="Flush">Flush</name>
            <comment>Writes any cached data to the file.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="ReadShort">ReadShort:</name>
            <comment>Reads a Short value (2 bytes). The position is updated automatically.</comment>
            <returntype>short</returntype>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ReadInt">ReadInt:</name>
            <comment>Reads an Int value (4 bytes). The position is updated automatically.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ReadLong">ReadLong:</name>
            <comment>Reads a Long value (8 bytes). The position is updated automatically.</comment>
            <returntype>long long</returntype>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ReadSignedByte">ReadSignedByte:</name>
            <returntype>int</returntype>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ReadFloat">ReadFloat:</name>
            <comment>Reads a Float value (4 bytes). The position is updated automatically.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ReadDouble">ReadDouble:</name>
            <comment>Reads a Double value (8 bytes). The position is updated automatically.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ReadBytes">ReadBytes::::</name>
            <comment>Reads the bytes from Position to Position + Length (exclusive) and writes them to the given array starting from StartOffset.
The position is updated automatically.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Buffer</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteBytes">WriteBytes::::</name>
            <comment>Writes the bytes from the array to the file.  The position is updated automatically.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Buffer</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteShort">WriteShort::</name>
            <comment>Writes a Short value (2 bytes). The position is updated automatically.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Value</name>
                <type>short</type>
            </parameter>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteByte">WriteByte::</name>
            <comment>Writes a single Byte. The position is updated automatically.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Value</name>
                <type>unsigned char</type>
            </parameter>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteInt">WriteInt::</name>
            <comment>Writes an Int value (4 bytes). The position is updated automatically.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Value</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteLong">WriteLong::</name>
            <comment>Writes a Long value (8 bytes). The position is updated automatically.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Value</name>
                <type>long long</type>
            </parameter>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteDouble">WriteDouble::</name>
            <comment>Writes Double value (8 bytes). The position is updated automatically.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteFloat">WriteFloat::</name>
            <comment>Writes a Float value (4 bytes). The position is updated automatically.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Value</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteB4XObject">WriteB4XObject::</name>
            <comment>Writes the given object to the file.
This method is capable of writing the following types: Lists, Arrays, Maps, Strings, primitive types and user types.
Combinations of these types are also supported.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Object</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ReadB4XObject">ReadB4XObject:</name>
            <comment>Reads an object previously saved with WriteB4XObject. See WriteB4XObject for the supported types.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ReadUnsignedByte">ReadUnsignedByte:</name>
            <comment>Reads a single byte. The position is updated automatically.</comment>
            <returntype>unsigned char</returntype>
            <parameter>
                <name>Position</name>
                <type>long long</type>
            </parameter>
        </method>
        <property>
            <name>CurrentPosition</name>
            <comment>Returns the current file position. The position is updated automatically after each operation.</comment>
            <returntype>long long</returntype>
            <parameter>
                <name>p</name>
                <type>long long</type>
            </parameter>
        </property>
        <property>
            <name>Size</name>
            <comment>Returns the total size.</comment>
            <returntype>long long</returntype>
        </property>
    </class>
    <class>
        <name>B4IByteConverter</name>
        <shortname>ByteConverter</shortname>
        <method>
            <name DesignerName="IntsFromBytes">IntsFromBytes:</name>
            <comment>Converts an array of Bytes to an array of Ints. Each 4 bytes are converted to an Int.</comment>
            <returntype>int[]</returntype>
            <parameter>
                <name>Bytes</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ShortsToBytes">ShortsToBytes:</name>
            <comment>Converts an array of Shorts to an array of Bytes. Each Short is converted to 2 bytes.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Shorts</name>
                <type>short[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LongsToBytes">LongsToBytes:</name>
            <comment>Converts an array of Longs to an array of Bytes. Each Long is converted to 8 bytes.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Longs</name>
                <type>long[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LongsFromBytes">LongsFromBytes:</name>
            <comment>Converts an array of Bytes to an array of Longs. Each 8 bytes are converted to a Long.</comment>
            <returntype>long[]</returntype>
            <parameter>
                <name>Bytes</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="IntsToBytes">IntsToBytes:</name>
            <comment>Converts an array of Ints to an array of Bytes. Each Int is converted to 4 bytes.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Ints</name>
                <type>int[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ShortsFromBytes">ShortsFromBytes:</name>
            <comment>Converts an array of Bytes to an array of Shorts. Each 2 bytes are converted to a Short.</comment>
            <returntype>short[]</returntype>
            <parameter>
                <name>Bytes</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DoublesFromBytes">DoublesFromBytes:</name>
            <comment>Converts an array of Bytes to an array of Doubles. Each 8 bytes are converted to a Double.</comment>
            <returntype>double[]</returntype>
            <parameter>
                <name>Bytes</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DoublesToBytes">DoublesToBytes:</name>
            <comment>Converts an array of Doubles to an array of Bytes. Each Double is converted to 8 bytes.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Doubles</name>
                <type>double[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="StringFromBytes">StringFromBytes::</name>
            <comment>Converts the bytes to a string. Similar to BytesToString keyword.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Bytes</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>Encoding</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="StringToBytes">StringToBytes::</name>
            <comment>Converts the string to an array of bytes.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Str</name>
                <type>NSString*</type>
            </parameter>
            <parameter>
                <name>Encoding</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="FloatsFromBytes">FloatsFromBytes:</name>
            <comment>Converts an array of Bytes to an array of Floats. Each 4 bytes are converted to a Float.</comment>
            <returntype>float[]</returntype>
            <parameter>
                <name>Bytes</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="FloatsToBytes">FloatsToBytes:</name>
            <comment>Converts an array of Floats to an array of Bytes. Each Float is converted to 4 bytes.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Doubles</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="HexFromBytes">HexFromBytes:</name>
            <comment>Returns the hex representation of the given bytes.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>Bytes</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="HexToBytes">HexToBytes:</name>
            <comment>Parses a hex string to an array of bytes.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Hex</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ArrayCopy">ArrayCopy:::::</name>
            <comment>Copies data from the source array to the destination array.
Src - The source array.
SrcOffset - The position of the first byte that will be copied.
Dest - The destination array.
DestOffset - The position in the destination array of the first byte.
Count - Number of bytes to copy.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Src</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>SrcOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Dest</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>DestOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Count</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SupportedEncodings">SupportedEncodings</name>
            <comment>Returns an array of strings with the supported encodings.</comment>
            <returntype>NSString[]</returntype>
        </method>
        <property>
            <name>LittleEndian</name>
            <comment>Gets or sets the converter endianess. The default value is False (big endian).</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>p</name>
                <type>BOOL</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4ICompressedStreams</name>
        <shortname>CompressedStreams</shortname>
        <method>
            <name DesignerName="CompressBytes">CompressBytes::</name>
            <comment>Compresses the Data array using zlib or gzip compression. Returns the compressed data as an array of bytes.
Data - The data to compress.
CompressMethod - "zlib" or "gzip"</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>CompressMethod</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="DecompressBytes">DecompressBytes::</name>
            <comment>Decompresses the data using zlib or gzip compression. Returns the uncompressed data as an array of bytes.
CompressedData - The data to decompress.
CompressMethod - "zlib" or "gzip"</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>CompressedData</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>CompressMethod</name>
                <type>NSString*</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>B4IAsyncStreams</name>
        <shortname>AsyncStreams</shortname>
        <event>NewData (Buffer() As Byte)</event>
        <event>Error</event>
        <event>Terminated</event>
        <event>NewStream (Dir As String, FileName As String)</event>
        <method>
            <name DesignerName="Initialize">Initialize::::</name>
            <comment>Initializes AsyncStreams in standard mode.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi1</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>In</name>
                <type>NSInputStream*</type>
            </parameter>
            <parameter>
                <name>Out</name>
                <type>NSOutputStream*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="InitializePrefix">InitializePrefix:::::</name>
            <comment>Initializes AsyncStreams in prefix mode. This mode can only be used if both sides of the connection adhere to the "prefix" protocol.
In / Out - The monitored streams.
BigEndian - The prefix endianess.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi1</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>In</name>
                <type>NSInputStream*</type>
            </parameter>
            <parameter>
                <name>BigEndian</name>
                <type>BOOL</type>
            </parameter>
            <parameter>
                <name>Out</name>
                <type>NSOutputStream*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Write">Write:</name>
            <comment>Asynchronously writes all the data in the array.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Buffer</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Write2">Write2:::</name>
            <comment>Asynchronously writes the data.
Buffer - The array holding the data.
Start - The position in the array of the first byte that will be written.
Length - Number of bytes to write.</comment>
            <returntype>BOOL</returntype>
            <parameter>
                <name>Buffer</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="WriteStream">WriteStream::</name>
            <returntype>BOOL</returntype>
            <parameter>
                <name>In</name>
                <type>NSInputStream*</type>
            </parameter>
            <parameter>
                <name>Size1</name>
                <type>long long</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Close">Close</name>
            <comment>Closes the monitored streams.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="IsInitialized">IsInitialized</name>
            <returntype>BOOL</returntype>
        </method>
        <property>
            <name>StreamTotal</name>
            <returntype>long long</returntype>
            <parameter>
                <name>p</name>
                <type>long long</type>
            </parameter>
        </property>
        <property>
            <name>StreamReceived</name>
            <returntype>long long</returntype>
            <parameter>
                <name>p</name>
                <type>long long</type>
            </parameter>
        </property>
        <property>
            <name>StreamFolder</name>
            <comment>Gets or sets the folder that is used when receiving streams.</comment>
            <returntype>NSString*</returntype>
            <parameter>
                <name>p</name>
                <type>NSString*</type>
            </parameter>
        </property>
    </class>
    <class>
        <name>B4ISerializator</name>
        <shortname>B4XSerializator</shortname>
        <event>ObjectToBytes (Success As Boolean, Bytes() As Byte)</event>
        <event>BytesToObject (Success As Boolean, NewObject As Object)</event>
        <method>
            <name DesignerName="ConvertObjectToBytes">ConvertObjectToBytes:</name>
            <comment>In-memory version of RandomAccessFile.WriteB4XObject.
This method is capable of writing the following types: Lists, Arrays, Maps, Strings, primitive types and user types.
Combinations of these types are also supported.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Object</name>
                <type>NSObject*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ConvertObjectToBytesAsync">ConvertObjectToBytesAsync:::</name>
            <comment>Asynchronously converts the object to bytes. The ObjectToBytes event will be raised with the serialized bytes.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>Object</name>
                <type>NSObject*</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ConvertBytesToObject">ConvertBytesToObject:</name>
            <comment>In-memory version of RandomAccessFile.ReadB4XObject.</comment>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>Bytes</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ConvertBytesToObjectAsync">ConvertBytesToObjectAsync:::</name>
            <comment>Asynchronously converts the bytes to object. The BytesToObject event will be raised when the object is ready.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bi</name>
                <type>B4I*</type>
            </parameter>
            <parameter>
                <name>Bytes</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>NSString*</type>
            </parameter>
        </method>
        <property>
            <name>Tag</name>
            <returntype>NSObject*</returntype>
            <parameter>
                <name>p</name>
                <type>NSObject*</type>
            </parameter>
        </property>
    </class>
    <version>1.5</version>
    <dependsOn>libz.dylib</dependsOn>
</root>
